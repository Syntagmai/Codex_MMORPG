#!/usr/bin/env python3
"""
Script para padronizar a estrutura de todos os guias da wiki.
Adiciona √≠ndices detalhados e melhora formata√ß√£o visual.
"""

import os
import re
from pathlib import Path
from datetime import datetime

def standardize_guide_structure():
    """Padroniza a estrutura de todos os guias da wiki."""
    
    guides_path = Path("wiki/docs/otclient/guides")
    
    if not guides_path.exists():
        print("‚ùå Pasta de guias n√£o encontrada!")
        return
    
    print("üîß Padronizando estrutura dos guias...")
    
    # Lista de arquivos de guia
    guide_files = list(guides_path.glob("*.md"))
    
    processed_count = 0
    
    for guide_file in guide_files:
        if guide_file.name.endswith('_backup_'):
            continue  # Pular arquivos de backup
        
        print(f"üìÑ Processando: {guide_file.name}")
        
        try:
            # Ler conte√∫do
            with open(guide_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Fazer backup
            backup_file = guide_file.parent / f"{guide_file.stem}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Padronizar estrutura
            new_content = standardize_single_guide(content, guide_file.name)
            
            # Salvar arquivo padronizado
            with open(guide_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            processed_count += 1
            print(f"‚úÖ {guide_file.name} padronizado")
            
        except Exception as e:
            print(f"‚ùå Erro ao processar {guide_file.name}: {e}")
    
    print(f"\n‚úÖ Processamento conclu√≠do!")
    print(f"üìä Guias processados: {processed_count}")
    
    return processed_count

def standardize_single_guide(content, filename):
    """Padroniza a estrutura de um √∫nico guia."""
    
    lines = content.split('\n')
    new_lines = []
    
    # Padr√µes para identificar se√ß√µes
    section_pattern = r'^#{1,6}\s+(.+)$'
    
    # Extrair t√≠tulo principal
    title = filename.replace('.md', '').replace('_', ' ').title()
    
    # Adicionar frontmatter padronizado se n√£o existir
    if not lines[0].startswith('---'):
        new_lines.extend([
            '---',
            f'title: {title}',
            'tags: [otclient, guide, documentation, system]',
            'type: guide',
            'status: active',
            'priority: alta',
            f'created: {datetime.now().strftime("%Y-%m-%d")}',
            f'updated: {datetime.now().strftime("%Y-%m-%d")}',
            '---',
            ''
        ])
    
    # Processar linhas
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # Pular frontmatter existente
        if line.startswith('---') and i == 0:
            while i < len(lines) and not (lines[i] == '---' and i > 0):
                i += 1
            i += 1
            continue
        
        # Adicionar t√≠tulo principal se n√£o existir
        if i == 0 and not line.startswith('# '):
            new_lines.append(f'# {title}')
            new_lines.append('')
            new_lines.append('> [!info] **GUIA COMPLETO**')
            new_lines.append(f'> Este guia fornece documenta√ß√£o completa sobre o {title.lower()}.')
            new_lines.append('')
        
        # Processar se√ß√µes
        section_match = re.match(section_pattern, line)
        if section_match:
            section_title = section_match.group(1)
            section_level = len(line) - len(line.lstrip('#'))
            
            # Adicionar separador visual para se√ß√µes principais
            if section_level == 2:
                new_lines.append('')
                new_lines.append('---')
                new_lines.append('')
            
            # Melhorar formata√ß√£o de se√ß√µes
            if section_level == 2:
                # Se√ß√£o principal - adicionar emoji e formata√ß√£o
                emoji = get_section_emoji(section_title)
                new_lines.append(f'{line} {emoji}')
            elif section_level == 3:
                # Subse√ß√£o - adicionar emoji
                emoji = get_subsection_emoji(section_title)
                new_lines.append(f'{line} {emoji}')
            else:
                new_lines.append(line)
        else:
            new_lines.append(line)
        
        i += 1
    
    # Adicionar √≠ndice detalhado se n√£o existir
    if not has_detailed_index(new_lines):
        new_lines = add_detailed_index(new_lines)
    
    # Adicionar se√ß√£o de navega√ß√£o se n√£o existir
    if not has_navigation_section(new_lines):
        new_lines = add_navigation_section(new_lines)
    
    return '\n'.join(new_lines)

def get_section_emoji(section_title):
    """Retorna emoji apropriado para se√ß√£o."""
    emoji_map = {
        'vis√£o geral': 'üéØ',
        'visao geral': 'üéØ',
        'overview': 'üéØ',
        'introdu√ß√£o': 'üìñ',
        'introducao': 'üìñ',
        'introduction': 'üìñ',
        'sistema': '‚öôÔ∏è',
        'system': '‚öôÔ∏è',
        'configura√ß√£o': 'üîß',
        'configuracao': 'üîß',
        'configuration': 'üîß',
        'exemplo': 'üí°',
        'examples': 'üí°',
        'exemplos': 'üí°',
        'api': 'üìö',
        'reference': 'üìö',
        'refer√™ncia': 'üìö',
        'referencia': 'üìö',
        'troubleshooting': 'üîç',
        'solu√ß√£o': 'üîç',
        'solucao': 'üîç',
        'problemas': 'üîç',
        'performance': '‚ö°',
        'otimiza√ß√£o': '‚ö°',
        'otimizacao': '‚ö°',
        'debug': 'üêõ',
        'depura√ß√£o': 'üêõ',
        'depuracao': 'üêõ'
    }
    
    section_lower = section_title.lower()
    for key, emoji in emoji_map.items():
        if key in section_lower:
            return emoji
    
    return 'üìã'

def get_subsection_emoji(subsection_title):
    """Retorna emoji apropriado para subse√ß√£o."""
    emoji_map = {
        'conceito': 'üß†',
        'concept': 'üß†',
        'implementa√ß√£o': 'üíª',
        'implementacao': 'üíª',
        'implementation': 'üíª',
        'exemplo': 'üéÆ',
        'example': 'üéÆ',
        'refer√™ncia': 'üìö',
        'referencia': 'üìö',
        'reference': 'üìö',
        'vis√£o geral': 'üëÅÔ∏è',
        'visao geral': 'üëÅÔ∏è',
        'overview': 'üëÅÔ∏è',
        'detalhes': 'üîç',
        'details': 'üîç',
        'estrutura': 'üèóÔ∏è',
        'structure': 'üèóÔ∏è',
        'fun√ß√£o': '‚öôÔ∏è',
        'funcao': '‚öôÔ∏è',
        'function': '‚öôÔ∏è'
    }
    
    subsection_lower = subsection_title.lower()
    for key, emoji in emoji_map.items():
        if key in subsection_lower:
            return emoji
    
    return 'üìù'

def has_detailed_index(lines):
    """Verifica se o guia j√° tem √≠ndice detalhado."""
    for line in lines:
        if '√çndice' in line or 'Index' in line:
            return True
    return False

def add_detailed_index(lines):
    """Adiciona √≠ndice detalhado ao guia."""
    # Encontrar posi√ß√£o ap√≥s t√≠tulo principal
    insert_pos = 0
    for i, line in enumerate(lines):
        if line.startswith('# ') and i > 0:
            insert_pos = i + 1
            break
    
    # Extrair se√ß√µes para o √≠ndice
    sections = []
    for line in lines:
        if line.startswith('## '):
            section_title = line.replace('## ', '').split(' ')[-1]  # Remove emoji
            sections.append(section_title)
    
    # Criar √≠ndice
    index_lines = [
        '',
        '## üìã **√çNDICE DETALHADO**',
        '',
        '### **üéØ Navega√ß√£o R√°pida**',
        ''
    ]
    
    for i, section in enumerate(sections, 1):
        anchor = section.lower().replace(' ', '-').replace('√ß', 'c').replace('√£', 'a')
        index_lines.append(f'{i}. [{section}](#{anchor})')
    
    index_lines.extend([
        '',
        '### **üìö Se√ß√µes Principais**',
        '',
        '| Se√ß√£o | Descri√ß√£o |',
        '|-------|-----------|'
    ])
    
    for section in sections:
        description = get_section_description(section)
        index_lines.append(f'| {section} | {description} |')
    
    index_lines.append('')
    
    # Inserir √≠ndice
    lines[insert_pos:insert_pos] = index_lines
    
    return lines

def get_section_description(section):
    """Retorna descri√ß√£o para se√ß√£o do √≠ndice."""
    descriptions = {
        'vis√£o geral': 'Conceitos fundamentais e arquitetura',
        'sistema': 'Funcionalidades e componentes principais',
        'configura√ß√£o': 'Configura√ß√µes e par√¢metros',
        'exemplos': 'Casos de uso e exemplos pr√°ticos',
        'api': 'Refer√™ncia completa da API',
        'troubleshooting': 'Solu√ß√£o de problemas comuns',
        'performance': 'Otimiza√ß√µes e melhores pr√°ticas'
    }
    
    section_lower = section.lower()
    for key, desc in descriptions.items():
        if key in section_lower:
            return desc
    
    return 'Documenta√ß√£o e refer√™ncia'

def has_navigation_section(lines):
    """Verifica se o guia j√° tem se√ß√£o de navega√ß√£o."""
    for line in lines:
        if 'Navega√ß√£o' in line or 'Navigation' in line:
            return True
    return False

def add_navigation_section(lines):
    """Adiciona se√ß√£o de navega√ß√£o ao final do guia."""
    nav_lines = [
        '',
        '---',
        '',
        '## üß≠ **NAVEGA√á√ÉO**',
        '',
        '### **üìñ Guias Relacionados**',
        '',
        '- [Guia de In√≠cio R√°pido](../Getting_Started_Guide.md)',
        '- [Guia de Configura√ß√£o](../Configuration_Guide.md)',
        '- [Guia de Debug](../Debug_System_Guide.md)',
        '',
        '### **üîó Links √öteis**',
        '',
        '- [Documenta√ß√£o Principal](../../../README.md)',
        '- [√çndice da Wiki](../../../Wiki_Index.md)',
        '- [Sistema de Busca](../../../Navigation_Index_Search.md)',
        '',
        '### **üìû Suporte**',
        '',
        'Para d√∫vidas ou problemas:',
        '- Consulte a se√ß√£o [Troubleshooting](#troubleshooting)',
        '- Verifique os [Exemplos Pr√°ticos](#exemplos-pr√°ticos)',
        '- Consulte a [Refer√™ncia da API](#api)',
        ''
    ]
    
    lines.extend(nav_lines)
    return lines

if __name__ == "__main__":
    standardize_guide_structure() 
## üîó **Links Autom√°ticos - Scripts**

> [!info] **Script de Automa√ß√£o**
> Este script faz parte do sistema de automa√ß√£o da wiki

### **üìö Links Obrigat√≥rios**
- [[../README|Hub Central da Wiki]]
- [[../dashboard/task_master|Task Master]]
- [[../dashboard/integrated_task_manager|Dashboard Central]]

### **üîß Links de Scripts**
- [[../update/README|Documenta√ß√£o de Scripts]]
- [[../maps/scripts_index|√çndice de Scripts]]
- [[../templates/README|Templates de Scripts]]

### **üìä Scripts Relacionados**
- [[../update/automatic_linkage_system.py|automatic_linkage_system.py]]
- [[../update/create_automatic_link_templates.py|create_automatic_link_templates.py]]
- [[../update/orphan_files_analyzer.py|orphan_files_analyzer.py]]
- [[../update/update_json_maps.py|update_json_maps.py]]

### **üìà M√©tricas do Script**
- **Nome**: standardize_guide_structure
- **Categoria**: Scripts de Automa√ß√£o
- **Fun√ß√£o**: Automa√ß√£o de tarefas da wiki
- **Status**: Ativo

---

