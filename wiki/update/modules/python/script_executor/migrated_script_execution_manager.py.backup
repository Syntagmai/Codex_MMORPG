#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script Migrado: script_execution_manager.py
M√≥dulo de Destino: python.script_executor
Data de Migra√ß√£o: 2025-08-01 12:21:35

Script original migrado para a estrutura modular unificada.
"""

# Imports do m√≥dulo
from . import ScriptexecutorModule

# Conte√∫do original do script
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gerenciador de Execu√ß√£o de Scripts Python
Gerencia a execu√ß√£o de scripts Python com resolu√ß√£o autom√°tica de erros
"""

import json
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

class ScriptExecutionManager:
    def __init__(self):
        self.project_root = Path(".")
        self.update_path = self.project_root / "wiki/update"
        self.log_path = self.project_root / "wiki/log"
        
        # Configura√ß√µes
        self.max_retries = 3
        self.timeout_seconds = 60
        self.error_resolver_path = self.update_path / "python_error_resolver.py"
        
        # Cache de scripts executados
        self.execution_cache = {}
        
    def execute_script_with_error_resolution(self, script_path: str, args: List[str] = None) -> Dict[str, Any]:
        """Executa script Python com resolu√ß√£o autom√°tica de erros"""
        print(f"üöÄ Executando script: {script_path}")
        
        if args is None:
            args = []
        
        execution_result = {
            "script_path": script_path,
            "args": args,
            "timestamp": datetime.now().isoformat(),
            "attempts": 0,
            "success": False,
            "error_resolved": False,
            "output": "",
            "error": "",
            "execution_time": 0
        }
        
        # Tentar executar o script
        for attempt in range(self.max_retries):
            execution_result["attempts"] = attempt + 1
            print(f"üìã Tentativa {attempt + 1}/{self.max_retries}")
            
            start_time = time.time()
            
            try:
                # Executar script
                cmd = [sys.executable, script_path] + args
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=self.timeout_seconds)
                
                execution_time = time.time() - start_time
                execution_result["execution_time"] = round(execution_time, 2)
                
                if result.returncode == 0:
                    execution_result["success"] = True
                    execution_result["output"] = result.stdout
                    print(f"‚úÖ Script executado com sucesso em {execution_time:.2f}s")
                    break
                else:
                    execution_result["error"] = result.stderr
                    print(f"‚ùå Erro na execu√ß√£o: {result.stderr}")
                    
                    # Tentar resolver erro automaticamente
                    if self.resolve_script_error(script_path, result.stderr):
                        execution_result["error_resolved"] = True
                        print("üîÑ Erro resolvido, tentando executar novamente...")
                        continue
                    else:
                        print("‚ö†Ô∏è N√£o foi poss√≠vel resolver o erro automaticamente")
                        break
                        
            except subprocess.TimeoutExpired:
                execution_result["error"] = "Timeout: Script demorou muito para executar"
                print("‚è∞ Timeout na execu√ß√£o")
                break
            except Exception as e:
                execution_result["error"] = str(e)
                print(f"‚ùå Erro inesperado: {e}")
                break
        
        # Registrar resultado
        self.log_execution(execution_result)
        
        return execution_result
    
    def resolve_script_error(self, script_path: str, error_message: str) -> bool:
        """Resolve erro em script usando o resolver autom√°tico"""
        try:
            if not self.error_resolver_path.exists():
                print("‚ö†Ô∏è Resolver de erros n√£o encontrado")
                return False
            
            # Executar resolver de erros
            cmd = [sys.executable, str(self.error_resolver_path), script_path]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("Erro resolvido automaticamente")
                return True
            else:
                print(f"‚ùå Resolver n√£o conseguiu corrigir: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao executar resolver: {e}")
            return False
    
    def execute_script_safely(self, script_path: str, args: List[str] = None) -> bool:
        """Executa script de forma segura com fallback"""
        print(f"üõ°Ô∏è Executando script com seguran√ßa: {script_path}")
        
        result = self.execute_script_with_error_resolution(script_path, args)
        
        if result["success"]:
            return True
        
        # Se falhou, tentar fallback
        print("üîÑ Tentando modo fallback...")
        return self.execute_fallback_mode(script_path, args)
    
    def execute_fallback_mode(self, script_path: str, args: List[str] = None) -> bool:
        """Executa script em modo fallback (simplificado)"""
        try:
            print(f"üîÑ Modo fallback para {script_path}")
            
            # Verificar se √© um script de atualiza√ß√£o de mapas
            if "update" in script_path and "maps" in script_path:
                print("üìã Detectado script de atualiza√ß√£o de mapas")
                return self.create_basic_map_update(script_path)
            
            # Verificar se √© um script de an√°lise
            if "analyze" in script_path:
                print("üìä Detectado script de an√°lise")
                return self.create_basic_analysis_report(script_path)
            
            # Fallback gen√©rico
            print("‚ö†Ô∏è Fallback gen√©rico - criando relat√≥rio b√°sico")
            return self.create_basic_report(script_path)
            
        except Exception as e:
            print(f"‚ùå Erro no modo fallback: {e}")
            return False
    
    def create_basic_map_update(self, script_path: str) -> bool:
        """Cria atualiza√ß√£o b√°sica de mapas"""
        try:
            script_name = Path(script_path).stem
            
            # Determinar tipo de mapa baseado no nome do script
            if "source" in script_name:
                map_file = self.project_root / "wiki/maps/otclient_source_index.json"
                basic_data = {
                    "metadata": {
                        "version": "1.0",
                        "last_updated": datetime.now().isoformat(),
                        "status": "basic_fallback"
                    },
                    "source_files": []
                }
            elif "wiki" in script_name:
                map_file = self.project_root / "wiki/maps/wiki_map.json"
                basic_data = {
                    "metadata": {
                        "version": "1.0",
                        "last_updated": datetime.now().isoformat(),
                        "status": "basic_fallback"
                    },
                    "categories": {},
                    "files": {}
                }
            else:
                map_file = self.project_root / "wiki/maps/basic_fallback.json"
                basic_data = {
                    "metadata": {
                        "version": "1.0",
                        "last_updated": datetime.now().isoformat(),
                        "status": "basic_fallback",
                        "script": script_name
                    }
                }
            
            # Salvar mapa b√°sico
            map_file.parent.mkdir(parents=True, exist_ok=True)
            with open(map_file, 'w', encoding='utf-8') as f:
                json.dump(basic_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Mapa b√°sico criado: {map_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar mapa b√°sico: {e}")
            return False
    
    def create_basic_analysis_report(self, script_path: str) -> bool:
        """Cria relat√≥rio b√°sico de an√°lise"""
        try:
            script_name = Path(script_path).stem
            report_file = self.project_root / "wiki/maps" / f"{script_name}_fallback_report.json"
            
            basic_report = {
                "metadata": {
                    "version": "1.0",
                    "last_updated": datetime.now().isoformat(),
                    "status": "fallback_report",
                    "script": script_name
                },
                "analysis": {
                    "status": "basic_fallback",
                    "message": "An√°lise b√°sica criada devido a erro no script original"
                }
            }
            
            report_file.parent.mkdir(parents=True, exist_ok=True)
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(basic_report, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Relat√≥rio b√°sico criado: {report_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar relat√≥rio b√°sico: {e}")
            return False
    
    def create_basic_report(self, script_path: str) -> bool:
        """Cria relat√≥rio b√°sico gen√©rico"""
        try:
            script_name = Path(script_path).stem
            report_file = self.project_root / "wiki/log" / f"{script_name}_fallback.log"
            
            basic_report = f"""
Script: {script_path}
Status: Fallback Mode
Timestamp: {datetime.now().isoformat()}
Message: Script executado em modo fallback devido a erros
            """.strip()
            
            report_file.parent.mkdir(parents=True, exist_ok=True)
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(basic_report)
            
            print(f"‚úÖ Relat√≥rio b√°sico criado: {report_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar relat√≥rio b√°sico: {e}")
            return False
    
    def log_execution(self, execution_result: Dict[str, Any]):
        """Registra resultado da execu√ß√£o"""
        log_file = self.log_path / "script_executions.json"
        
        # Carregar log existente
        executions = []
        if log_file.exists():
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    executions = json.load(f)
            except:
                executions = []
        
        # Adicionar nova execu√ß√£o
        executions.append(execution_result)
        
        # Manter apenas as √∫ltimas 100 execu√ß√µes
        if len(executions) > 100:
            executions = executions[-100:]
        
        # Salvar log
        log_file.parent.mkdir(parents=True, exist_ok=True)
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(executions, f, indent=2, ensure_ascii=False)
        
        print(f"Execucao registrada em {log_file}")
    
    def get_execution_stats(self) -> Dict[str, Any]:
        """Obt√©m estat√≠sticas de execu√ß√£o"""
        log_file = self.log_path / "script_executions.json"
        
        if not log_file.exists():
            return {"total_executions": 0, "success_rate": 0}
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                executions = json.load(f)
            
            total = len(executions)
            successful = sum(1 for e in executions if e.get("success", False))
            success_rate = (successful / total * 100) if total > 0 else 0
            
            return {
                "total_executions": total,
                "successful_executions": successful,
                "success_rate": round(success_rate, 2),
                "error_resolutions": sum(1 for e in executions if e.get("error_resolved", False))
            }
            
        except Exception as e:
            print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return {"total_executions": 0, "success_rate": 0}

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) < 2:
        print("‚ùå Uso: python script_execution_manager.py <script_path> [args...]")
        sys.exit(1)
    
    script_path = sys.argv[1]
    args = sys.argv[2:] if len(sys.argv) > 2 else []
    
    manager = ScriptExecutionManager()
    
    # Executar script com resolu√ß√£o de erros
    result = manager.execute_script_with_error_resolution(script_path, args)
    
    # Exibir estat√≠sticas
    stats = manager.get_execution_stats()
    print(f"\nüìä Estat√≠sticas de Execu√ß√£o:")
    print(f"   Total de execu√ß√µes: {stats['total_executions']}")
    print(f"   Taxa de sucesso: {stats['success_rate']}%")
    print(f"   Erros resolvidos: {stats.get('error_resolutions', 0)}")
    
    # Retornar c√≥digo de sa√≠da
    if result["success"]:
        print("‚úÖ Execu√ß√£o conclu√≠da com sucesso")
        sys.exit(0)
    else:
        print("‚ùå Execu√ß√£o n√£o foi bem-sucedida")
        sys.exit(1)

if __name__ == "__main__":
    main() 

# Fun√ß√£o de integra√ß√£o com o m√≥dulo
def integrate_with_module():
    """Integra o script com o m√≥dulo de destino."""
    module = ScriptexecutorModule()
    return module.execute()

if __name__ == "__main__":
    # Executar integra√ß√£o com m√≥dulo
    result = integrate_with_module()
    if result:
        print(f"‚úÖ Script script_execution_manager.py executado com sucesso via m√≥dulo python.script_executor")
    else:
        print(f"‚ùå Erro na execu√ß√£o do script script_execution_manager.py via m√≥dulo python.script_executor")
