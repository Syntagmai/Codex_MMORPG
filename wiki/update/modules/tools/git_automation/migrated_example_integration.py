# Constantes
MAX_RETRIES = 8
MAX_ATTEMPTS = 10
TIMEOUT_SECONDS = 60

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script Migrado: example_integration.py
M√≥dulo de Destino: tools.git_automation
Data de Migra√ß√£o: 2025-08-01 12:21:44

Script original migrado para a estrutura modular unificada.
"""

# Imports do m√≥dulo
from . import GitautomationModule

# Conte√∫do original do script
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemplo de Integra√ß√£o: Auto-Aprendizado com Sistema de Regras
Demonstra como o sistema aprende e melhora regras automaticamente
"""

from datetime import datetime

def exemplo_integracao_regras():
    """Exemplo de como o sistema integra auto-aprendizado com regras"""
    
    # Inicializar sistema
    print("üöÄ Inicializando Sistema de Auto-Aprendizado com Integra√ß√£o de Regras...")
    auto_learning = AutoLearningSystem()
    
    # Simular intera√ß√µes que usam regras
    interacoes_exemplo = [
        {
            "user_request": "Criar documenta√ß√£o para m√≥dulo Lua",
            "context_detected": {
                "technologies": ["Lua", "OTClient"],
                "task_type": "documentation",
                "complexity": "medium"
            },
            "agents_selected": ["Content Creator", "Lua Agent"],
            "workflow_executed": "documentation_workflow",
            "execution_time": 45.2,
            "success_score": 0.85,
            "rules_used": ["documentation-rules.md", "wiki-rules.md"]
        },
        {
            "user_request": "Otimizar c√≥digo C++ do cliente",
            "context_detected": {
                "technologies": ["C++", "OTClient"],
                "task_type": "optimization",
                "complexity": "high"
            },
            "agents_selected": ["Engine Developer", "Python Agent"],
            "workflow_executed": "optimization_workflow",
            "execution_time": 120.5,
            "success_score": 0.92,
            "rules_used": ["bmad-system-rules.md", "intelligent-orchestration-rules.md"]
        },
        {
            "user_request": "Criar nova regra para indexa√ß√£o",
            "context_detected": {
                "technologies": ["Python", "JSON"],
                "task_type": "rule_creation",
                "complexity": "low"
            },
            "agents_selected": ["Python Agent"],
            "workflow_executed": "rule_creation_workflow",
            "execution_time": 25.8,
            "success_score": 0.78,
            "rules_used": ["template.md", "system-rules.md"]
        }
    ]
    
    # Registrar intera√ß√µes
    print("üìù Registrando intera√ß√µes de exemplo...")
    for i, dados in enumerate(interacoes_exemplo):
        interacao = InteractionData(
            timestamp=datetime.now().isoformat(),
            user_request=dados["user_request"],
            context_detected=dados["context_detected"],
            agents_selected=dados["agents_selected"],
            workflow_executed=dados["workflow_executed"],
            execution_time=dados["execution_time"],
            success_score=dados["success_score"],
            rules_used=dados["rules_used"]
        )
        
        auto_learning.record_interaction(interacao)
        print(f"  ‚úÖ Intera√ß√£o {i+1} registrada")
    
    # Aguardar processamento
    print("‚è≥ Aguardando processamento de aprendizado...")
    import time
    time.sleep(5)
    
    # Analisar padr√µes de regras
    print("üîç Analisando padr√µes de uso das regras...")
    padroes_regras = auto_learning.analyze_rule_patterns()
    print(f"  üìä {len(padroes_regras)} padr√µes de regras identificados")
    
    # Obter recomenda√ß√µes de regras
    print("üí° Obtendo recomenda√ß√µes de regras...")
    contexto_exemplo = {
        "technologies": ["Lua", "OTClient"],
        "task_type": "documentation",
        "complexity": "medium"
    }
    
    recomendacoes = auto_learning.get_rule_recommendations(contexto_exemplo)
    print(f"  üéØ {len(recomendacoes)} recomenda√ß√µes encontradas")
    
    for rec in recomendacoes:
        print(f"    üìã {rec['rule_file']} - Relev√¢ncia: {rec['relevance_score']:.2f}")
    
    # Gerar relat√≥rio completo
    print("üìä Gerando relat√≥rio completo...")
    relatorio = auto_learning.generate_learning_report()
    
    print("\n" + "="*60)
    print("üìã RELAT√ìRIO DE APRENDIZADO COM INTEGRA√á√ÉO DE REGRAS")
    print("="*60)
    
    # Estat√≠sticas gerais
    stats = relatorio['stats']
    print(f"üìà Total de Intera√ß√µes: {stats['total_interactions']}")
    print(f"üß† Padr√µes Aprendidos: {stats['patterns_learned']}")
    print(f"‚ö° Otimiza√ß√µes Aplicadas: {stats['optimizations_applied']}")
    
    # An√°lise de regras
    if 'rules_learning' in relatorio:
        rules_data = relatorio['rules_learning']
        print(f"\nüìö AN√ÅLISE DE REGRAS:")
        print(f"  üìñ Regras Analisadas: {rules_data.get('total_rules_analyzed', 0)}")
        print(f"  üîß Otimiza√ß√µes Geradas: {rules_data.get('optimizations_generated', 0)}")
        
        usage_stats = rules_data.get('usage_statistics', {})
        print(f"  üìä Total de Usos: {usage_stats.get('total_usage_events', 0)}")
        print(f"  üéØ Taxa de Sucesso M√©dia: {usage_stats.get('avg_success_rate', 0):.2f}")
    
    # Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES:")
    for rec in relatorio['recommendations']:
        print(f"  ‚Ä¢ {rec}")
    
    print("\n" + "="*60)
    print("‚úÖ Exemplo de integra√ß√£o conclu√≠do!")
    print("="*60)
    
    return auto_learning

def exemplo_otimizacao_automatica_regras():
    """Exemplo de otimiza√ß√£o autom√°tica de regras"""
    
    print("\nüîß EXEMPLO DE OTIMIZA√á√ÉO AUTOM√ÅTICA DE REGRAS")
    print("="*60)
    
    auto_learning = AutoLearningSystem()
    
    # Simular mais intera√ß√µes para gerar padr√µes
    print("üìù Simulando intera√ß√µes adicionais...")
    for i in range(10):
        interacao = InteractionData(
            timestamp=datetime.now().isoformat(),
            user_request=f"Tarefa de exemplo {i+1}",
            context_detected={
                "technologies": ["Python", "Lua"] if i % 2 == 0 else ["C++", "OTClient"],
                "task_type": "development" if i % 3 == 0 else "documentation",
                "complexity": "medium"
            },
            agents_selected=["Python Agent", "Content Creator"],
            workflow_executed="standard_workflow",
            execution_time=30.0 + i * 5,
            success_score=0.7 + (i * 0.02),
            rules_used=["bmad-system-rules.md", "auto-learning-rules.md"]
        )
        
        auto_learning.record_interaction(interacao)
    
    # Aguardar processamento
    import time
    time.sleep(3)
    
    # Aplicar otimiza√ß√µes de regras
    print("‚ö° Aplicando otimiza√ß√µes autom√°ticas de regras...")
    otimizacoes = auto_learning.apply_rule_optimizations()
    
    if otimizacoes:
        print(f"  ‚úÖ {len(otimizacoes)} otimiza√ß√µes aplicadas:")
        for opt in otimizacoes:
            print(f"    üîß Regra {opt['rule_id']} - Confian√ßa: {opt['confidence']:.2f}")
    else:
        print("  ‚ÑπÔ∏è Nenhuma otimiza√ß√£o aplicada (threshold de confian√ßa n√£o atingido)")
    
    print("‚úÖ Exemplo de otimiza√ß√£o conclu√≠do!")

if __name__ == "__main__":
    # Executar exemplos
    auto_learning = exemplo_integracao_regras()
    exemplo_otimizacao_automatica_regras()
    
    print("\nüéâ Todos os exemplos executados com sucesso!")
    print("O sistema de auto-aprendizado est√° integrado com o sistema de regras!") 

# Fun√ß√£o de integra√ß√£o com o m√≥dulo
def integrate_with_module():
    """Integra o script com o m√≥dulo de destino."""
    module = GitautomationModule()
    return module.execute()

if __name__ == "__main__":
    # Executar integra√ß√£o com m√≥dulo
    result = integrate_with_module()
    if result:
        print(f"‚úÖ Script example_integration.py executado com sucesso via m√≥dulo tools.git_automation")
    else:
        print(f"‚ùå Erro na execu√ß√£o do script example_integration.py via m√≥dulo tools.git_automation")
