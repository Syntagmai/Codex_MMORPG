    from git_automation_agent import GitAutomationAgent
    import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional, List
import json
import logging
import os
import re
import subprocess
import sys

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Integra√ß√£o Git + Sistema de Tarefas - Sistema Autom√°tico e At√¥mico
==================================================================

Script que integra o agente de automa√ß√£o Git com o sistema de tarefas BMAD,
permitindo commits autom√°ticos durante o desenvolvimento com contexto de tarefa.
IMPLEMENTA√á√ÉO AUTOM√ÅTICA E AT√îMICA - NUNCA MANUAL!

Autor: Sistema BMAD - OTClient Documentation
Data: 2024-12-19
Vers√£o: 2.0 - Autom√°tico e At√¥mico
"""


# Adicionar pasta do agente Git ao path
sys.path.append(str(Path(__file__).parent.parent / 'bmad' / 'agents'))

try:
except ImportError:
    print("‚ùå Erro: Agente Git n√£o encontrado. Execute primeiro a cria√ß√£o do agente.")
    sys.exit(1)

# Configura√ß√£o de logging
log_dir = Path.cwd() / 'wiki' / 'log'
log_dir.mkdir(parents=True, exist_ok=True)
log_file = log_dir / 'git_task_integration.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

class GitTaskIntegration:
    """Integra√ß√£o entre agente Git e sistema de tarefas - AUTOM√ÅTICO E AT√îMICO."""
    
    def __init__(self):
        """Inicializa a integra√ß√£o."""
        self.logger = logging.getLogger(__name__)
        self.git_agent = GitAutomationAgent()
        self.project_root = Path.cwd()
        self.task_log_dir = self.project_root / 'wiki' / 'log'
        
        self.logger.info("üöÄ Integra√ß√£o Git + Sistema de Tarefas inicializada - MODO AUTOM√ÅTICO")
    
    def resolve_git_errors_automatically(self) -> bool:
        """
        Resolve erros Git automaticamente sem interven√ß√£o manual.
        
        Returns:
            True se todos os erros foram resolvidos
        """
        self.logger.info("üîß Iniciando resolu√ß√£o autom√°tica de erros Git...")
        
        try:
            # 1. Verificar se √© reposit√≥rio Git
            if not self.is_git_repo():
                self.logger.info("üìÅ Inicializando reposit√≥rio Git...")
                self.initialize_git_repo()
            
            # 2. Verificar arquivos n√£o rastreados
            untracked_files = self.get_untracked_files()
            if untracked_files:
                self.logger.info(f"üìÑ Adicionando {len(untracked_files)} arquivos n√£o rastreados...")
                self.add_untracked_files_automatically(untracked_files)
            
            # 3. Verificar arquivos modificados
            modified_files = self.get_modified_files()
            if modified_files:
                self.logger.info(f"üìù Adicionando {len(modified_files)} arquivos modificados...")
                self.add_modified_files_automatically(modified_files)
            
            # 4. Verificar arquivos deletados
            deleted_files = self.get_deleted_files()
            if deleted_files:
                self.logger.info(f"üóëÔ∏è Removendo {len(deleted_files)} arquivos deletados...")
                self.remove_deleted_files_automatically(deleted_files)
            
            # 5. Verificar conflitos de merge
            if self.has_merge_conflicts():
                self.logger.info("‚ö†Ô∏è Resolvendo conflitos de merge automaticamente...")
                self.resolve_merge_conflicts_automatically()
            
            # 6. Verificar staging area
            if self.is_staging_area_empty():
                self.logger.info("üì¶ Adicionando mudan√ßas ao staging...")
                self.add_changed_files_automatically()
            
            self.logger.info("‚úÖ Resolu√ß√£o autom√°tica de erros conclu√≠da!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na resolu√ß√£o autom√°tica: {e}")
            return False
    
    def is_git_repo(self) -> bool:
        """Verifica se √© um reposit√≥rio Git."""
        try:
            result = subprocess.run(['git', 'rev-parse', '--git-dir'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            return result.returncode == 0
        except Exception:
            return False
    
    def initialize_git_repo(self) -> bool:
        """Inicializa reposit√≥rio Git automaticamente."""
        try:
            subprocess.run(['git', 'init'], check=True, cwd=self.project_root)
            self.logger.info("‚úÖ Reposit√≥rio Git inicializado")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao inicializar Git: {e}")
            return False
    
    def get_untracked_files(self) -> List[str]:
        """Obt√©m lista de arquivos n√£o rastreados."""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            untracked = []
            for line in result.stdout.splitlines():
                if line.startswith('??'):
                    file_path = line[3:].strip()
                    untracked.append(file_path)
            return untracked
        except Exception:
            return []
    
    def get_modified_files(self) -> List[str]:
        """Obt√©m lista de arquivos modificados."""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            modified = []
            for line in result.stdout.splitlines():
                if line.startswith(' M') or line.startswith('M '):
                    file_path = line[3:].strip()
                    modified.append(file_path)
            return modified
        except Exception:
            return []
    
    def get_deleted_files(self) -> List[str]:
        """Obt√©m lista de arquivos deletados."""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            deleted = []
            for line in result.stdout.splitlines():
                if line.startswith(' D') or line.startswith('D '):
                    file_path = line[3:].strip()
                    deleted.append(file_path)
            return deleted
        except Exception:
            return []
    
    def add_untracked_files_automatically(self, files: List[str]) -> bool:
        """Adiciona arquivos n√£o rastreados automaticamente."""
        try:
            for file_path in files:
                subprocess.run(['git', 'add', file_path], check=True, cwd=self.project_root)
            self.logger.info(f"‚úÖ {len(files)} arquivos n√£o rastreados adicionados")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao adicionar arquivos: {e}")
            return False
    
    def add_modified_files_automatically(self, files: List[str]) -> bool:
        """Adiciona arquivos modificados automaticamente."""
        try:
            for file_path in files:
                subprocess.run(['git', 'add', file_path], check=True, cwd=self.project_root)
            self.logger.info(f"‚úÖ {len(files)} arquivos modificados adicionados")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao adicionar arquivos modificados: {e}")
            return False
    
    def remove_deleted_files_automatically(self, files: List[str]) -> bool:
        """Remove arquivos deletados automaticamente."""
        try:
            for file_path in files:
                subprocess.run(['git', 'rm', file_path], check=True, cwd=self.project_root)
            self.logger.info(f"‚úÖ {len(files)} arquivos deletados removidos")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao remover arquivos: {e}")
            return False
    
    def has_merge_conflicts(self) -> bool:
        """Verifica se h√° conflitos de merge."""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            return 'UU' in result.stdout or 'AA' in result.stdout
        except Exception:
            return False
    
    def resolve_merge_conflicts_automatically(self) -> bool:
        """Resolve conflitos de merge automaticamente."""
        try:
            # Estrat√©gia: aceitar vers√£o atual (ours)
            subprocess.run(['git', 'checkout', '--ours', '.'], check=True, cwd=self.project_root)
            subprocess.run(['git', 'add', '.'], check=True, cwd=self.project_root)
            self.logger.info("‚úÖ Conflitos de merge resolvidos automaticamente")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao resolver conflitos: {e}")
            return False
    
    def is_staging_area_empty(self) -> bool:
        """Verifica se a staging area est√° vazia."""
        try:
            result = subprocess.run(['git', 'diff', '--cached', '--name-only'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            return not result.stdout.strip()
        except Exception:
            return True
    
    def add_changed_files_automatically(self) -> bool:
        """Adiciona todas as mudan√ßas automaticamente."""
        try:
            subprocess.run(['git', 'add', '.'], check=True, cwd=self.project_root)
            self.logger.info("‚úÖ Todas as mudan√ßas adicionadas ao staging")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao adicionar mudan√ßas: {e}")
            return False
    
    def analyze_changes_by_context(self) -> Dict[str, List[str]]:
        """
        Analisa mudan√ßas e as separa por contexto para commits at√¥micos.
        
        Returns:
            Dicion√°rio com mudan√ßas separadas por contexto
        """
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            
            changes_by_context = {
                'documentation': [],
                'rules': [],
                'scripts': [],
                'wiki': [],
                'logs': [],
                'maps': [],
                'other': []
            }
            
            for line in result.stdout.splitlines():
                if not line.strip():
                    continue
                
                file_path = line[3:].strip()
                
                # Categorizar por contexto
                if file_path.startswith('.cursor/rules/'):
                    changes_by_context['rules'].append(file_path)
                elif file_path.startswith('wiki/update/'):
                    changes_by_context['scripts'].append(file_path)
                elif file_path.startswith('wiki/log/'):
                    changes_by_context['logs'].append(file_path)
                elif file_path.startswith('wiki/maps/'):
                    changes_by_context['maps'].append(file_path)
                elif file_path.startswith('wiki/') and file_path.endswith('.md'):
                    changes_by_context['wiki'].append(file_path)
                elif file_path.endswith('.md'):
                    changes_by_context['documentation'].append(file_path)
                else:
                    changes_by_context['other'].append(file_path)
            
            # Remover contextos vazios
            return {k: v for k, v in changes_by_context.items() if v}
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao analisar mudan√ßas: {e}")
            return {}
    
    def create_atomic_commits(self, changes_by_context: Dict[str, List[str]], task_info: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        Cria commits at√¥micos baseados no contexto das mudan√ßas.
        
        Args:
            changes_by_context: Mudan√ßas separadas por contexto
            task_info: Informa√ß√µes da tarefa ativa
            
        Returns:
            Lista de resultados dos commits
        """
        commit_results = []
        
        for context, files in changes_by_context.items():
            if not files:
                continue
            
            self.logger.info(f"üì¶ Criando commit at√¥mico para contexto: {context}")
            
            # Adicionar apenas arquivos deste contexto
            try:
                for file_path in files:
                    subprocess.run(['git', 'add', file_path], check=True, cwd=self.project_root)
                
                # Gerar mensagem de commit baseada no contexto
                commit_message = self.generate_contextual_commit_message(context, files, task_info)
                
                # Executar commit
                result = subprocess.run(['git', 'commit', '-m', commit_message], 
                                      capture_output=True, text=True, cwd=self.project_root)
                
                if result.returncode == 0:
                    commit_hash = self.extract_commit_hash(result.stdout)
                    commit_result = {
                        'context': context,
                        'files': files,
                        'message': commit_message,
                        'hash': commit_hash,
                        'success': True
                    }
                    commit_results.append(commit_result)
                    self.logger.info(f"‚úÖ Commit at√¥mico criado: {commit_hash[:8]} - {context}")
                else:
                    commit_result = {
                        'context': context,
                        'files': files,
                        'message': commit_message,
                        'error': result.stderr,
                        'success': False
                    }
                    commit_results.append(commit_result)
                    self.logger.error(f"‚ùå Erro no commit: {result.stderr}")
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao criar commit para {context}: {e}")
                commit_results.append({
                    'context': context,
                    'files': files,
                    'error': str(e),
                    'success': False
                })
        
        return commit_results
    
    def generate_contextual_commit_message(self, context: str, files: List[str], task_info: Optional[Dict[str, Any]] = None) -> str:
        """
        Gera mensagem de commit contextual em portugu√™s.
        
        Args:
            context: Contexto das mudan√ßas
            files: Lista de arquivos modificados
            task_info: Informa√ß√µes da tarefa ativa
            
        Returns:
            Mensagem de commit em formato Conventional Commits
        """
        # Mapear contexto para tipo de commit
        context_to_type = {
            'documentation': 'docs',
            'rules': 'refactor',
            'scripts': 'feat',
            'wiki': 'docs',
            'logs': 'chore',
            'maps': 'refactor',
            'other': 'chore'
        }
        
        commit_type = context_to_type.get(context, 'chore')
        
        # Gerar descri√ß√£o baseada no contexto
        context_descriptions = {
            'documentation': 'atualizar documenta√ß√£o',
            'rules': 'atualizar regras do sistema',
            'scripts': 'melhorar scripts de automa√ß√£o',
            'wiki': 'atualizar documenta√ß√£o da wiki',
            'logs': 'atualizar logs do sistema',
            'maps': 'atualizar mapas JSON',
            'other': 'atualizar arquivos do sistema'
        }
        
        description = context_descriptions.get(context, 'atualizar arquivos')
        
        # Adicionar contexto de tarefa se dispon√≠vel
        if task_info and task_info.get('task_id'):
            description += f" - {task_info['task_id']}"
        
        # Adicionar n√∫mero de arquivos se relevante
        if len(files) > 1:
            description += f" ({len(files)} arquivos)"
        
        return f"{commit_type}: {description}"
    
    def extract_commit_hash(self, git_output: str) -> str:
        """Extrai hash do commit da sa√≠da do Git."""
        match = re.search(r'\[([a-f0-9]+)\]', git_output)
        if match:
            return match.group(1)
        
        # Fallback: buscar hash completo
        match = re.search(r'([a-f0-9]{40})', git_output)
        if match:
            return match.group(1)
        
        return "unknown"
    
    def get_active_task(self) -> Optional[Dict[str, Any]]:
        """
        Obt√©m informa√ß√µes da tarefa ativa.
        
        Returns:
            Informa√ß√µes da tarefa ativa ou None
        """
        try:
            temp_tasks_dir = self.task_log_dir / 'temp_tasks'
            if not temp_tasks_dir.exists():
                return None
            
            # Encontrar tarefa mais recente
            task_files = list(temp_tasks_dir.glob('TASK_*.md'))
            if not task_files:
                return None
            
            latest_task = max(task_files, key=lambda x: x.stat().st_mtime)
            task_content = latest_task.read_text(encoding='utf-8')
            
            # Extrair informa√ß√µes da tarefa
            task_info = {
                'file_path': str(latest_task),
                'modified_time': latest_task.stat().st_mtime,
                'content': task_content
            }
            
            # Extrair ID da tarefa
            task_id_match = re.search(r'TASK-\d+', task_content)
            if task_id_match:
                task_info['task_id'] = task_id_match.group()
            
            # Extrair t√≠tulo da tarefa
            title_match = re.search(r'# Tarefa: (.+)', task_content)
            if title_match:
                task_info['title'] = title_match.group(1).strip()
            
            # Extrair status da tarefa
            status_match = re.search(r'\*\*Status\*\*: (.+)', task_content)
            if status_match:
                task_info['status'] = status_match.group(1).strip()
            
            # Verificar se est√° em andamento
            if 'Em Andamento' in task_info.get('status', ''):
                self.logger.info(f"üìã Tarefa ativa encontrada: {task_info.get('task_id', 'Unknown')}")
                return task_info
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter tarefa ativa: {e}")
            return None
    
    def auto_commit_atomic(self, auto_push: bool = False) -> Dict[str, Any]:
        """
        Executa commit autom√°tico e at√¥mico com resolu√ß√£o de erros.
        
        Args:
            auto_push: Se deve fazer push autom√°tico
            
        Returns:
            Resultado da opera√ß√£o
        """
        self.logger.info("üöÄ Iniciando commit autom√°tico e at√¥mico...")
        
        try:
            # 1. Resolver erros automaticamente
            if not self.resolve_git_errors_automatically():
                return {
                    'success': False,
                    'error': 'Falha na resolu√ß√£o autom√°tica de erros',
                    'timestamp': datetime.now().isoformat()
                }
            
            # 2. Obter tarefa ativa
            task_info = self.get_active_task()
            
            # 3. Analisar mudan√ßas por contexto
            changes_by_context = self.analyze_changes_by_context()
            
            if not changes_by_context:
                return {
                    'success': True,
                    'message': 'Nenhuma mudan√ßa detectada',
                    'commits': [],
                    'timestamp': datetime.now().isoformat()
                }
            
            # 4. Criar commits at√¥micos
            commit_results = self.create_atomic_commits(changes_by_context, task_info)
            
            # 5. Fazer push se solicitado
            push_result = None
            if auto_push and any(c['success'] for c in commit_results):
                push_result = self.auto_push()
            
            # 6. Gerar relat√≥rio
            report = self.generate_commit_report(commit_results, task_info, push_result)
            
            return {
                'success': True,
                'commits': commit_results,
                'push': push_result,
                'report': report,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no commit autom√°tico: {e}")
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def auto_push(self) -> Dict[str, Any]:
        """Executa push autom√°tico."""
        try:
            result = subprocess.run(['git', 'push'], 
                                  capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ Push realizado com sucesso")
                return {
                    'success': True,
                    'message': 'Push realizado com sucesso'
                }
            else:
                self.logger.error(f"‚ùå Erro no push: {result.stderr}")
                return {
                    'success': False,
                    'error': result.stderr
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no push: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def generate_commit_report(self, commit_results: List[Dict[str, Any]], task_info: Optional[Dict[str, Any]], push_result: Optional[Dict[str, Any]]) -> str:
        """Gera relat√≥rio detalhado dos commits."""
        report = f"""# Relat√≥rio de Commit Autom√°tico e At√¥mico

**Data**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Status**: {'‚úÖ Sucesso' if all(c['success'] for c in commit_results) else '‚ö†Ô∏è Parcial'}

## üìä Resumo dos Commits

"""
        
        successful_commits = [c for c in commit_results if c['success']]
        failed_commits = [c for c in commit_results if not c['success']]
        
        report += f"- **Commits realizados**: {len(successful_commits)}\n"
        report += f"- **Commits com erro**: {len(failed_commits)}\n"
        report += f"- **Taxa de sucesso**: {len(successful_commits)/len(commit_results)*100:.1f}%\n\n"
        
        if task_info:
            report += f"## üìã Contexto da Tarefa\n"
            report += f"- **ID**: {task_info.get('task_id', 'N/A')}\n"
            report += f"- **T√≠tulo**: {task_info.get('title', 'N/A')}\n"
            report += f"- **Status**: {task_info.get('status', 'N/A')}\n\n"
        
        if successful_commits:
            report += "## ‚úÖ Commits Realizados\n\n"
            for commit in successful_commits:
                report += f"### {commit['context'].title()}\n"
                report += f"- **Hash**: {commit['hash'][:8]}\n"
                report += f"- **Mensagem**: {commit['message']}\n"
                report += f"- **Arquivos**: {len(commit['files'])}\n\n"
        
        if failed_commits:
            report += "## ‚ùå Commits com Erro\n\n"
            for commit in failed_commits:
                report += f"### {commit['context'].title()}\n"
                report += f"- **Erro**: {commit.get('error', 'Erro desconhecido')}\n"
                report += f"- **Arquivos**: {len(commit['files'])}\n\n"
        
        if push_result:
            report += "## üöÄ Push\n"
            if push_result['success']:
                report += f"- **Status**: ‚úÖ {push_result['message']}\n"
            else:
                report += f"- **Status**: ‚ùå {push_result['error']}\n"
        
        return report

def main():
    """Fun√ß√£o principal."""
    
    parser = argparse.ArgumentParser(description='Integra√ß√£o Git + Sistema de Tarefas - Autom√°tico e At√¥mico')
    parser.add_argument('--auto-commit', action='store_true', help='Executar commit autom√°tico')
    parser.add_argument('--auto-push', action='store_true', help='Fazer push autom√°tico ap√≥s commit')
    parser.add_argument('--resolve-errors', action='store_true', help='Apenas resolver erros Git')
    parser.add_argument('--analyze-changes', action='store_true', help='Apenas analisar mudan√ßas')
    
    args = parser.parse_args()
    
    integration = GitTaskIntegration()
    
    if args.resolve_errors:
        success = integration.resolve_git_errors_automatically()
        print(f"{'‚úÖ' if success else '‚ùå'} Resolu√ß√£o de erros {'conclu√≠da' if success else 'falhou'}")
        return
    
    if args.analyze_changes:
        changes = integration.analyze_changes_by_context()
        print("üìä An√°lise de mudan√ßas por contexto:")
        for context, files in changes.items():
            print(f"  {context}: {len(files)} arquivos")
        return
    
    if args.auto_commit:
        result = integration.auto_commit_atomic(args.auto_push)
        if result['success']:
            print("‚úÖ Commit autom√°tico e at√¥mico realizado com sucesso!")
            print(f"üìä {len(result['commits'])} commits criados")
            if result.get('push', {}).get('success'):
                print("üöÄ Push realizado com sucesso!")
        else:
            print(f"‚ùå Erro no commit autom√°tico: {result['error']}")
        return
    
    # Modo padr√£o: commit autom√°tico
    result = integration.auto_commit_atomic(False)
    if result['success']:
        print("‚úÖ Commit autom√°tico e at√¥mico realizado com sucesso!")
        print(f"üìä {len(result['commits'])} commits criados")
    else:
        print(f"‚ùå Erro no commit autom√°tico: {result['error']}")

if __name__ == '__main__':
    main() 