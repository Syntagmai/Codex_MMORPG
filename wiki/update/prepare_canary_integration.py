from unicode_aliases import *
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
import json
import os
import re

#!/usr/bin/env python3
"""
Script para preparar a wiki do OTClient para integra√ß√£o com Canary
Adiciona tags de integra√ß√£o, refer√™ncias cruzadas e estrutura para ecossistema completo
"""

class CanaryIntegrationPreparer:
    def __init__(self, wiki_dir: str = "wiki"):
        self.wiki_dir = Path(wiki_dir)
        self.docs_dir = self.wiki_dir / "docs"
        self.integration_dir = self.docs_dir / "integration"
        
        # √Åreas que precisam de integra√ß√£o com Canary
        self.integration_areas = {
            "protocol": {
                "files": [
                    "Network_System_Guide.md",
                    "Protocol_System_Guide.md"
                ],
                "tags": ["protocol-opencode", "protocol-extendedopen", "canary", "integration"]
            },
            "network": {
                "files": [
                    "Network_System_Guide.md"
                ],
                "tags": ["network-communication", "client-server-interface", "canary", "integration"]
            },
            "game_state": {
                "files": [
                    "Creature_System_Guide.md",
                    "Item_System_Guide.md",
                    "World_System_Guide.md",
                    "Combat_System_Guide.md"
                ],
                "tags": ["game-state-sync", "canary", "integration"]
            }
        }
        
        # Refer√™ncias para Canary Wiki (placeholders)
        self.canary_references = {
            "protocol": "https://canary-wiki-url/protocol",
            "network": "https://canary-wiki-url/network", 
            "game_logic": "https://canary-wiki-url/game-logic",
            "database": "https://canary-wiki-url/database",
            "world_management": "https://canary-wiki-url/world-management"
        }
    
    def create_integration_structure(self):
        """Cria estrutura de pastas para integra√ß√£o"""
        print("Criando estrutura de integra√ß√£o...")
        
        # Criar pasta de integra√ß√£o
        self.integration_dir.mkdir(exist_ok=True)
        
        # Criar subpastas
        subdirs = ["protocol", "network", "game_state", "testing"]
        for subdir in subdirs:
            (self.integration_dir / subdir).mkdir(exist_ok=True)
        
        print("  Estrutura de integra√ß√£o criada")
    
    def add_integration_tags(self):
        """Adiciona tags de integra√ß√£o aos documentos existentes"""
        print("Adicionando tags de integra√ß√£o...")
        
        for area, config in self.integration_areas.items():
            for file_name in config["files"]:
                file_path = self.docs_dir / file_name
                if file_path.exists():
                    self.add_tags_to_file(file_path, config["tags"])
        
        print("  Tags de integra√ß√£o adicionadas")
    
    def add_tags_to_file(self, file_path: Path, tags: List[str]):
        """Adiciona tags de integra√ß√£o a um arquivo espec√≠fico"""
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se j√° tem frontmatter
        if content.startswith("---"):
            # Extrair frontmatter existente
            parts = content.split("---", 2)
            if len(parts) >= 3:
                frontmatter = parts[1]
                content_body = parts[2]
                
                # Adicionar tags de integra√ß√£o
                current_tags = re.search(r'tags:\s*\[(.*?)\]', frontmatter)
                if current_tags:
                    existing_tags = [tag.strip() for tag in current_tags.group(1).split(",")]
                    # Adicionar novas tags sem duplicar
                    for tag in tags:
                        if tag not in existing_tags:
                            existing_tags.append(tag)
                    
                    new_tags_str = ", ".join(existing_tags)
                    frontmatter = re.sub(
                        r'tags:\s*\[.*?\]',
                        f'tags: [{new_tags_str}]',
                        frontmatter
                    )
                
                # Adicionar metadados de integra√ß√£o
                if "cross_project: true" not in frontmatter:
                    frontmatter += "\ncross_project: true\nintegration_areas: [protocol, network, game_state]\nrelated_projects: [canary-wiki]\n"
                
                content = f"---{frontmatter}---{content_body}"
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
    
    def add_integration_sections(self):
        """Adiciona se√ß√µes de integra√ß√£o aos documentos"""
        print("Adicionando se√ß√µes de integra√ß√£o...")
        
        for area, config in self.integration_areas.items():
            for file_name in config["files"]:
                file_path = self.docs_dir / file_name
                if file_path.exists():
                    self.add_integration_section_to_file(file_path, area)
        
        print("  Se√ß√µes de integra√ß√£o adicionadas")
    
    def add_integration_section_to_file(self, file_path: Path, area: str):
        """Adiciona se√ß√£o de integra√ß√£o a um arquivo espec√≠fico"""
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se j√° tem se√ß√£o de integra√ß√£o
        if "## üîó **Integra√ß√£o com Canary**" in content:
            return
        
        # Criar se√ß√£o de integra√ß√£o baseada na √°rea
        integration_section = self.create_integration_section(area)
        
        # Adicionar antes da se√ß√£o de navega√ß√£o
        if "> [!success] **Navega√ß√£o**" in content:
            content = content.replace(
                "> [!success] **Navega√ß√£o**",
                f"{integration_section}\n\n---\n\n> [!success] **Navega√ß√£o**"
            )
        else:
            content += f"\n\n{integration_section}"
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def create_integration_section(self, area: str) -> str:
        """Cria se√ß√£o de integra√ß√£o baseada na √°rea"""
        if area == "protocol":
            return """## üîó **Integra√ß√£o com Canary**

### **Lado Cliente (OTClient)**
- Implementa√ß√£o do protocolo OpenCode e ExtendedOpen
- Gerenciamento de conex√£o e autentica√ß√£o
- Processamento de mensagens do servidor

### **Lado Servidor (Canary)**
- [Ver implementa√ß√£o do protocolo no Canary Wiki](https://canary-wiki-url/protocol)
- Gerenciamento de sess√µes e autentica√ß√£o
- Processamento de mensagens do cliente

### **Protocolo Compartilhado**
- [Especifica√ß√£o OpenCode](https://shared-specs-url/opencode)
- [Extens√µes ExtendedOpen](https://shared-specs-url/extendedopen)
- [Testes de Integra√ß√£o](https://canary-wiki-url/integration-tests)

> [!info] **Nota de Integra√ß√£o**
> Este sistema implementa o protocolo de comunica√ß√£o entre OTClient e Canary. 
> Para desenvolvimento, consulte a documenta√ß√£o do Canary para detalhes do lado servidor."""
        
        elif area == "network":
            return """## üîó **Integra√ß√£o com Canary**

### **Lado Cliente (OTClient)**
- Conex√£o TCP ass√≠ncrona com o servidor
- Gerenciamento de sess√µes e reconex√£o
- Criptografia XTEA e RSA

### **Lado Servidor (Canary)**
- [Ver sistema de rede no Canary Wiki](https://canary-wiki-url/network)
- Aceita√ß√£o de conex√µes e gerenciamento de clientes
- Implementa√ß√£o de criptografia

### **Comunica√ß√£o Compartilhada**
- [Especifica√ß√£o de rede](https://shared-specs-url/network)
- [Protocolo de handshake](https://shared-specs-url/handshake)
- [Testes de conectividade](https://canary-wiki-url/network-tests)

> [!info] **Nota de Integra√ß√£o**
> Este sistema gerencia a comunica√ß√£o de rede entre cliente e servidor.
> Para debugging, use as ferramentas de rede do Canary."""
        
        elif area == "game_state":
            return """## üîó **Integra√ß√£o com Canary**

### **Lado Cliente (OTClient)**
- Renderiza√ß√£o e interface do usu√°rio
- Processamento de entrada do jogador
- Sincroniza√ß√£o de estado local

### **Lado Servidor (Canary)**
- [Ver l√≥gica de jogo no Canary Wiki](https://canary-wiki-url/game-logic)
- Valida√ß√£o de a√ß√µes do jogador
- Gerenciamento de estado do mundo

### **Sincroniza√ß√£o Compartilhada**
- [Protocolo de sincroniza√ß√£o](https://shared-specs-url/sync)
- [Valida√ß√£o de estado](https://shared-specs-url/validation)
- [Testes de sincroniza√ß√£o](https://canary-wiki-url/sync-tests)

> [!info] **Nota de Integra√ß√£o**
> Este sistema sincroniza o estado do jogo entre cliente e servidor.
> Para desenvolvimento, consulte a l√≥gica de jogo do Canary."""
        
        return """## üîó **Integra√ß√£o com Canary**

### **Lado Cliente (OTClient)**
- Implementa√ß√£o do lado cliente
- APIs e interfaces dispon√≠veis

### **Lado Servidor (Canary)**
- [Ver implementa√ß√£o no Canary Wiki](https://canary-wiki-url)
- Detalhes do lado servidor

### **Interface Compartilhada**
- [Especifica√ß√£o compartilhada](https://shared-specs-url)
- [Testes de integra√ß√£o](https://canary-wiki-url/tests)

> [!info] **Nota de Integra√ß√£o**
> Este sistema se integra com o servidor Canary.
> Para detalhes completos, consulte a documenta√ß√£o do Canary."""
    
    def create_integration_documents(self):
        """Cria documentos espec√≠ficos de integra√ß√£o"""
        print("Criando documentos de integra√ß√£o...")
        
        # Documento principal de integra√ß√£o
        main_integration = """---
tags: [otclient, canary, integration, protocol, network, game_state]
status: completed
aliases: [Integra√ß√£o Canary, Cross Project Integration, Client Server Integration]
cross_project: true
integration_areas: [protocol, network, game_state]
related_projects: [canary-wiki]
---

# Integra√ß√£o OTClient + Canary

> [!info] **Ecosistema Completo do Jogo MMORPG**
> Este documento descreve a integra√ß√£o entre o OTClient (cliente) e o Canary (servidor), 
> formando um ecossistema completo para desenvolvimento de jogos MMORPG.

## üéØ **Vis√£o Geral da Integra√ß√£o**

### **Arquitetura do Sistema**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   OTClient      ‚îÇ    ‚îÇ  Protocol Layer ‚îÇ    ‚îÇ     Canary      ‚îÇ
‚îÇ   (Cliente)     ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ  (OpenCode +    ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (Servidor)    ‚îÇ
‚îÇ                 ‚îÇ    ‚îÇ   ExtendedOpen) ‚îÇ    ‚îÇ                 ‚îÇ
‚îÇ ‚Ä¢ UI System     ‚îÇ    ‚îÇ ‚Ä¢ Message Types ‚îÇ    ‚îÇ ‚Ä¢ Game Logic    ‚îÇ
‚îÇ ‚Ä¢ Client Logic  ‚îÇ    ‚îÇ ‚Ä¢ Encryption    ‚îÇ    ‚îÇ ‚Ä¢ Server Logic  ‚îÇ
‚îÇ ‚Ä¢ Rendering     ‚îÇ    ‚îÇ ‚Ä¢ Validation    ‚îÇ    ‚îÇ ‚Ä¢ Database      ‚îÇ
‚îÇ ‚Ä¢ Modules       ‚îÇ    ‚îÇ ‚Ä¢ Synchronization‚îÇ   ‚îÇ ‚Ä¢ World Mgmt    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üîê **Protocolo de Comunica√ß√£o**

### **OpenCode (Protocolo Base)**
- **Vers√µes Suportadas**: 7.72 at√© 14.12
- **Implementa√ß√£o**: OTClient ‚Üî Canary
- **Funcionalidades**: Comunica√ß√£o b√°sica cliente-servidor

### **ExtendedOpen (Extens√µes)**
- **Funcionalidades**: Features avan√ßadas customizadas
- **Implementa√ß√£o**: M√≥dulos OTClient ‚Üî Scripts Canary
- **Flexibilidade**: Extens√≠vel para necessidades espec√≠ficas

## üåê **Sistema de Rede**

### **Conex√£o e Autentica√ß√£o**
- **Login Protocol**: Handshake inicial
- **Session Management**: Gerenciamento de sess√µes
- **Security**: Criptografia XTEA, RSA

### **Comunica√ß√£o em Tempo Real**
- **Game Protocol**: Dados do jogo
- **Chat System**: Sistema de comunica√ß√£o
- **World Updates**: Atualiza√ß√µes do mundo

## üéÆ **Sincroniza√ß√£o de Estado**

### **Game State**
- **Player Position**: Posi√ß√£o do jogador
- **Inventory**: Invent√°rio e itens
- **Skills**: Habilidades e progress√£o
- **Combat**: Sistema de combate

### **World State**
- **Map Data**: Dados do mapa
- **Creatures**: Criaturas e NPCs
- **Items**: Itens no mundo
- **Effects**: Efeitos visuais

## üìö **Documenta√ß√£o Relacionada**

### **OTClient Wiki**
- [[Network_System_Guide]] - Sistema de rede
- [[Protocol_System_Guide]] - Protocolo de comunica√ß√£o
- [[Creature_System_Guide]] - Sistema de criaturas
- [[Item_System_Guide]] - Sistema de itens

### **Canary Wiki**
- [Protocol Implementation](https://canary-wiki-url/protocol)
- [Game Logic](https://canary-wiki-url/game-logic)
- [Database Management](https://canary-wiki-url/database)
- [World Management](https://canary-wiki-url/world-management)

### **Especifica√ß√µes Compartilhadas**
- [OpenCode Protocol](https://shared-specs-url/opencode)
- [ExtendedOpen Extensions](https://shared-specs-url/extendedopen)
- [Integration Tests](https://canary-wiki-url/integration-tests)

## üß™ **Testes de Integra√ß√£o**

### **Ferramentas de Teste**
- **Protocol Testing**: Valida√ß√£o de mensagens
- **Network Testing**: Testes de conectividade
- **State Sync Testing**: Valida√ß√£o de sincroniza√ß√£o
- **Performance Testing**: Testes de performance

### **Cen√°rios de Teste**
1. **Conex√£o e Login**: Valida√ß√£o do processo de login
2. **Comunica√ß√£o B√°sica**: Troca de mensagens simples
3. **Sincroniza√ß√£o de Estado**: Valida√ß√£o de dados do jogo
4. **Recupera√ß√£o de Erros**: Reconex√£o e recupera√ß√£o
5. **Performance**: Lat√™ncia e throughput

## üîÑ **Desenvolvimento Coordenado**

### **Fluxo de Desenvolvimento**
1. **Especifica√ß√£o**: Definir interface compartilhada
2. **Implementa√ß√£o OTClient**: Desenvolver lado cliente
3. **Implementa√ß√£o Canary**: Desenvolver lado servidor
4. **Testes de Integra√ß√£o**: Validar funcionamento
5. **Documenta√ß√£o**: Atualizar ambas as wikis

### **Boas Pr√°ticas**
- **Sempre documentar interfaces** compartilhadas
- **Manter compatibilidade** entre vers√µes
- **Testar integra√ß√£o** antes de releases
- **Atualizar documenta√ß√£o** em ambos os projetos

---

> [!success] **Navega√ß√£o**
> - [[Network_System_Guide]] - Sistema de rede
> - [[Protocol_System_Guide]] - Protocolo de comunica√ß√£o
> - [Canary Wiki](https://canary-wiki-url) - Documenta√ß√£o do servidor
> - [Especifica√ß√µes Compartilhadas](https://shared-specs-url) - Protocolos oficiais

"""
        
        with open(self.integration_dir / "OTClient_Canary_Integration.md", 'w', encoding='utf-8') as f:
            f.write(main_integration)
        
        print("  Documento principal de integra√ß√£o criado")
    
    def update_maps_for_integration(self):
        """Atualiza mapas JSON para incluir informa√ß√µes de integra√ß√£o"""
        print("Atualizando mapas para integra√ß√£o...")
        
        # Atualizar tags_index.json
        tags_file = self.wiki_dir / "maps" / "tags_index.json"
        if tags_file.exists():
            with open(tags_file, 'r', encoding='utf-8') as f:
                tags_data = json.load(f)
            
            # Adicionar tags de integra√ß√£o
            integration_tags = [
                "canary", "integration", "protocol-opencode", "protocol-extendedopen",
                "network-communication", "client-server-interface", "game-state-sync"
            ]
            
            for tag in integration_tags:
                if tag not in tags_data["files_by_tag"]:
                    tags_data["files_by_tag"][tag] = []
            
            # Adicionar arquivos de integra√ß√£o √†s tags
            integration_files = [
                "OTClient_Canary_Integration.md",
                "Network_System_Guide.md",
                "Protocol_System_Guide.md",
                "Creature_System_Guide.md",
                "Item_System_Guide.md"
            ]
            
            for tag in integration_tags:
                for file_name in integration_files:
                    if file_name not in tags_data["files_by_tag"][tag]:
                        tags_data["files_by_tag"][tag].append(file_name)
            
            with open(tags_file, 'w', encoding='utf-8') as f:
                json.dump(tags_data, f, indent=2, ensure_ascii=False)
        
        print("  Mapas atualizados para integra√ß√£o")
    
    def prepare_integration(self):
        """Executa todo o processo de prepara√ß√£o para integra√ß√£o"""
        print("üöÄ Preparando wiki para integra√ß√£o com Canary...")
        
        # 1. Criar estrutura de pastas
        self.create_integration_structure()
        
        # 2. Adicionar tags de integra√ß√£o
        self.add_integration_tags()
        
        # 3. Adicionar se√ß√µes de integra√ß√£o
        self.add_integration_sections()
        
        # 4. Criar documentos de integra√ß√£o
        self.create_integration_documents()
        
        # 5. Atualizar mapas JSON
        self.update_maps_for_integration()
        
        print("‚úÖ Prepara√ß√£o para integra√ß√£o com Canary conclu√≠da!")
        print("üéØ Wiki agora est√° preparada para ecossistema completo do jogo!")

if __name__ == "__main__":
    preparer = CanaryIntegrationPreparer()
    preparer.prepare_integration() 