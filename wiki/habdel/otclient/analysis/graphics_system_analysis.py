#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OTClient Graphics System Analysis
================================

Script para an√°lise profunda do sistema de gr√°ficos do OTClient
seguindo metodologia Habdel.

Autor: Sistema Habdel
Data: 2025-01-27
"""

import os
import re
import json
from pathlib import Path
from datetime import datetime

class OTClientGraphicsSystemAnalysis:
    """
    Analisador do sistema de gr√°ficos OTClient seguindo metodologia Habdel.
    """

    def __init__(self):
        """Inicializa o analisador do sistema de gr√°ficos."""
        self.base_path = Path(__file__).parent.parent.parent.parent.parent
        self.otclient_path = self.base_path / "otclient"
        self.graphics_path = self.otclient_path / "src" / "framework" / "graphics"
        self.habdel_path = self.base_path / "wiki" / "habdel" / "otclient"
        self.analysis_path = self.habdel_path / "analysis"
        
        # Configurar logging
        print("üé® OTClient Graphics System Analysis")
        print("=" * 50)
        
        # Estrutura de an√°lise
        self.analysis_results = {
            'metadata': {
                'version': '1.0.0',
                'analysis_date': datetime.now().isoformat(),
                'methodology': 'Habdel',
                'story_id': 'OTCLIENT-002',
                'system': 'Graphics System'
            },
            'overview': {
                'total_files': 0,
                'total_lines': 0,
                'components': {},
                'patterns': [],
                'apis': {},
                'dependencies': []
            },
            'components': {},
            'patterns': [],
            'apis': {},
            'examples': {},
            'integration_points': []
        }

    def analyze_graphics_system(self):
        """Executa an√°lise completa do sistema de gr√°ficos."""
        print("üîç Iniciando an√°lise do sistema de gr√°ficos...")
        
        if not self.graphics_path.exists():
            print(f"‚ùå Diret√≥rio graphics n√£o encontrado: {self.graphics_path}")
            return False
        
        # Contar arquivos
        files = list(self.graphics_path.glob("*.h")) + list(self.graphics_path.glob("*.cpp"))
        self.analysis_results['overview']['total_files'] = len(files)
        
        print(f"üìÅ Encontrados {len(files)} arquivos no sistema de gr√°ficos")
        
        # Analisar componentes principais
        main_components = [
            'graphics.h', 'graphics.cpp',
            'painter.h', 'painter.cpp',
            'texture.h', 'texture.cpp',
            'texturemanager.h', 'texturemanager.cpp',
            'shader.h', 'shader.cpp',
            'shaderprogram.h', 'shaderprogram.cpp',
            'shadermanager.h', 'shadermanager.cpp',
            'drawpool.h', 'drawpool.cpp',
            'drawpoolmanager.h', 'drawpoolmanager.cpp',
            'framebuffer.h', 'framebuffer.cpp',
            'image.h', 'image.cpp',
            'bitmapfont.h', 'bitmapfont.cpp',
            'particle.h', 'particle.cpp',
            'particlesystem.h', 'particlesystem.cpp',
            'particlemanager.h', 'particlemanager.cpp'
        ]
        
        for component in main_components:
            self.analyze_component(component)
        
        # Analisar padr√µes de design
        self.analyze_design_patterns()
        
        # Analisar APIs
        self.analyze_apis()
        
        # Gerar exemplos pr√°ticos
        self.generate_examples()
        
        # Identificar pontos de integra√ß√£o
        self.identify_integration_points()
        
        print("‚úÖ An√°lise do sistema de gr√°ficos conclu√≠da!")
        return True

    def analyze_component(self, filename):
        """Analisa um componente espec√≠fico do sistema de gr√°ficos."""
        file_path = self.graphics_path / filename
        
        if not file_path.exists():
            print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {filename}")
            return
        
        print(f"üîç Analisando: {filename}")
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # Extrair classes
            classes = re.findall(r'class\s+(\w+)(?:\s*:\s*(?:public|private|protected)\s+(\w+))?', content)
            
            # Extrair m√©todos
            methods = re.findall(r'(\w+(?:::\w+)?)\s+(\w+)\s*\([^)]*\)\s*(?:const)?\s*;', content)
            
            # Extrair padr√µes
            patterns = []
            if 'singleton' in content.lower():
                patterns.append('Singleton')
            if 'factory' in content.lower():
                patterns.append('Factory')
            if 'observer' in content.lower():
                patterns.append('Observer')
            if 'command' in content.lower():
                patterns.append('Command')
            if 'strategy' in content.lower():
                patterns.append('Strategy')
            
            # Contar linhas
            lines = len(content.split('\n'))
            
            self.analysis_results['components'][filename] = {
                'classes': [{'name': cls[0], 'inherits': cls[1] if cls[1] else None} for cls in classes],
                'methods': [{'return_type': m[0], 'name': m[1]} for m in methods],
                'patterns': patterns,
                'lines': lines,
                'size': len(content)
            }
            
            self.analysis_results['overview']['total_lines'] += lines
            
        except Exception as e:
            print(f"‚ùå Erro ao analisar {filename}: {e}")

    def analyze_design_patterns(self):
        """Analisa padr√µes de design no sistema de gr√°ficos."""
        print("üé® Analisando padr√µes de design...")
        
        patterns = set()
        for component_data in self.analysis_results['components'].values():
            patterns.update(component_data['patterns'])
        
        self.analysis_results['patterns'] = list(patterns)
        print(f"üìã Padr√µes identificados: {', '.join(patterns)}")

    def analyze_apis(self):
        """Analisa APIs do sistema de gr√°ficos."""
        print("üîå Analisando APIs...")
        
        # APIs principais identificadas
        apis = {
            'Graphics': {
                'description': 'Sistema principal de gr√°ficos',
                'methods': ['init', 'terminate', 'resize', 'clear'],
                'components': ['graphics.h', 'graphics.cpp']
            },
            'Painter': {
                'description': 'Sistema de pintura e renderiza√ß√£o',
                'methods': ['draw', 'fill', 'setColor', 'setOpacity'],
                'components': ['painter.h', 'painter.cpp']
            },
            'Texture': {
                'description': 'Gerenciamento de texturas',
                'methods': ['load', 'bind', 'unbind', 'destroy'],
                'components': ['texture.h', 'texture.cpp', 'texturemanager.h', 'texturemanager.cpp']
            },
            'Shader': {
                'description': 'Sistema de shaders',
                'methods': ['compile', 'link', 'use', 'setUniform'],
                'components': ['shader.h', 'shader.cpp', 'shaderprogram.h', 'shaderprogram.cpp']
            },
            'DrawPool': {
                'description': 'Sistema de pool de desenho',
                'methods': ['add', 'draw', 'clear', 'optimize'],
                'components': ['drawpool.h', 'drawpool.cpp', 'drawpoolmanager.h', 'drawpoolmanager.cpp']
            },
            'Particle': {
                'description': 'Sistema de part√≠culas',
                'methods': ['emit', 'update', 'render', 'destroy'],
                'components': ['particle.h', 'particle.cpp', 'particlesystem.h', 'particlesystem.cpp']
            }
        }
        
        self.analysis_results['apis'] = apis
        print(f"üîå APIs identificadas: {len(apis)}")

    def generate_examples(self):
        """Gera exemplos pr√°ticos de uso do sistema de gr√°ficos."""
        print("üí° Gerando exemplos pr√°ticos...")
        
        examples = {
            'basic_graphics': {
                'title': 'Inicializa√ß√£o B√°sica do Sistema de Gr√°ficos',
                'description': 'Como inicializar o sistema de gr√°ficos do OTClient',
                'code': '''// Exemplo de inicializa√ß√£o do sistema de gr√°ficos
#include "graphics.h"

void initGraphics() {
    // Inicializar sistema de gr√°ficos
    g_graphics.init();
    
    // Configurar viewport
    g_graphics.resize(800, 600);
    
    // Limpar tela
    g_graphics.clear();
}'''
            },
            'texture_loading': {
                'title': 'Carregamento de Texturas',
                'description': 'Como carregar e usar texturas no OTClient',
                'code': '''// Exemplo de carregamento de texturas
#include "texture.h"
#include "texturemanager.h"

void loadGameTextures() {
    // Carregar textura
    TexturePtr texture = g_textures.getTexture("player.png");
    
    if (texture) {
        // Usar textura
        texture->bind();
        // Renderizar...
        texture->unbind();
    }
}'''
            },
            'shader_usage': {
                'title': 'Uso de Shaders',
                'description': 'Como usar shaders para efeitos visuais',
                'code': '''// Exemplo de uso de shaders
#include "shaderprogram.h"

void setupShader() {
    // Criar programa de shader
    ShaderProgramPtr program = ShaderProgram::create();
    
    // Compilar shaders
    program->addShaderFromSourceCode(Shader::Vertex, vertexSource);
    program->addShaderFromSourceCode(Shader::Fragment, fragmentSource);
    
    // Linkar programa
    program->link();
    
    // Usar programa
    program->use();
    program->setUniformValue("color", Color::red);
}'''
            },
            'particle_system': {
                'title': 'Sistema de Part√≠culas',
                'description': 'Como criar e gerenciar sistemas de part√≠culas',
                'code': '''// Exemplo de sistema de part√≠culas
#include "particlesystem.h"
#include "particlemanager.h"

void createParticleEffect() {
    // Criar sistema de part√≠culas
    ParticleSystemPtr system = ParticleSystem::create();
    
    // Configurar part√≠culas
    system->setParticleType("fire");
    system->setEmissionRate(100);
    system->setLifetime(2.0f);
    
    // Adicionar ao gerenciador
    g_particles.addParticleSystem(system);
}'''
            }
        }
        
        self.analysis_results['examples'] = examples
        print(f"üí° Exemplos gerados: {len(examples)}")

    def identify_integration_points(self):
        """Identifica pontos de integra√ß√£o com outros sistemas."""
        print("üîó Identificando pontos de integra√ß√£o...")
        
        integration_points = [
            {
                'system': 'Core Framework',
                'description': 'Integra√ß√£o com sistema core (Application, ModuleManager)',
                'files': ['graphics.h', 'graphics.cpp'],
                'type': 'dependency'
            },
            {
                'system': 'UI System',
                'description': 'Integra√ß√£o com sistema de interface do usu√°rio',
                'files': ['painter.h', 'painter.cpp'],
                'type': 'integration'
            },
            {
                'system': 'Resource Management',
                'description': 'Integra√ß√£o com gerenciamento de recursos',
                'files': ['texturemanager.h', 'texturemanager.cpp'],
                'type': 'dependency'
            },
            {
                'system': 'Lua Engine',
                'description': 'Exposi√ß√£o de APIs para scripts Lua',
                'files': ['graphics.h', 'painter.h'],
                'type': 'binding'
            },
            {
                'system': 'Platform Layer',
                'description': 'Integra√ß√£o com camada de plataforma (OpenGL)',
                'files': ['glutil.h', 'shader.h', 'shader.cpp'],
                'type': 'abstraction'
            }
        ]
        
        self.analysis_results['integration_points'] = integration_points
        print(f"üîó Pontos de integra√ß√£o identificados: {len(integration_points)}")

    def generate_documentation(self):
        """Gera documenta√ß√£o t√©cnica detalhada."""
        print("üìö Gerando documenta√ß√£o t√©cnica...")
        
        doc_content = f"""# OTClient Graphics System - An√°lise T√©cnica

## üéØ Vis√£o Geral

O **Sistema de Gr√°ficos** do OTClient √© um sistema robusto e modular respons√°vel por toda a renderiza√ß√£o gr√°fica do cliente. Ele fornece uma abstra√ß√£o de alto n√≠vel sobre OpenGL, oferecendo APIs intuitivas para desenvolvimento de jogos.

## üìä Estat√≠sticas da An√°lise

- **Arquivos Analisados**: {self.analysis_results['overview']['total_files']}
- **Linhas de C√≥digo**: {self.analysis_results['overview']['total_lines']:,}
- **Componentes Principais**: {len(self.analysis_results['components'])}
- **Padr√µes Identificados**: {len(self.analysis_results['patterns'])}
- **APIs Documentadas**: {len(self.analysis_results['apis'])}

## üèóÔ∏è Arquitetura do Sistema

### **Componentes Principais**

{self._generate_components_section()}

### **Padr√µes de Design Identificados**

{self._generate_patterns_section()}

## üîå APIs Principais

{self._generate_apis_section()}

## üí° Exemplos Pr√°ticos

{self._generate_examples_section()}

## üîó Pontos de Integra√ß√£o

{self._generate_integration_section()}

## üìã Guia de Uso

### **Inicializa√ß√£o do Sistema**

```cpp
#include "graphics.h"

// Inicializar sistema de gr√°ficos
g_graphics.init();

// Configurar viewport
g_graphics.resize(800, 600);

// Limpar tela
g_graphics.clear();
```

### **Renderiza√ß√£o B√°sica**

```cpp
#include "painter.h"

// Criar painter
Painter painter;

// Configurar cor
painter.setColor(Color::white);

// Desenhar ret√¢ngulo
painter.drawFilledRect(Rect(10, 10, 100, 100));
```

### **Gerenciamento de Texturas**

```cpp
#include "texture.h"
#include "texturemanager.h"

// Carregar textura
TexturePtr texture = g_textures.getTexture("sprite.png");

// Usar textura
texture->bind();
// Renderizar...
texture->unbind();
```

## üé® Sistema de Shaders

O OTClient utiliza um sistema de shaders moderno baseado em OpenGL:

### **Tipos de Shader Suportados**
- **Vertex Shaders**: Transforma√ß√£o de v√©rtices
- **Fragment Shaders**: Processamento de pixels
- **Geometry Shaders**: Gera√ß√£o de geometria (se suportado)

### **Exemplo de Shader Customizado**

```glsl
// Vertex Shader
#version 330 core
layout (location = 0) in vec2 position;
layout (location = 1) in vec2 texCoord;

out vec2 TexCoord;

void main() {{
    gl_Position = vec4(position, 0.0, 1.0);
    TexCoord = texCoord;
}}
```

```glsl
// Fragment Shader
#version 330 core
out vec4 FragColor;
in vec2 TexCoord;

uniform sampler2D texture1;

void main() {{
    FragColor = texture(texture1, TexCoord);
}}
```

## üåü Sistema de Part√≠culas

O sistema de part√≠culas oferece:

### **Caracter√≠sticas**
- **Emission Control**: Controle de taxa de emiss√£o
- **Particle Types**: Diferentes tipos de part√≠culas
- **Affectors**: Modificadores de comportamento
- **Optimization**: Pool de part√≠culas para performance

### **Exemplo de Efeito de Fogo**

```cpp
// Criar sistema de part√≠culas
ParticleSystemPtr fireSystem = ParticleSystem::create();

// Configurar tipo de part√≠cula
fireSystem->setParticleType("fire");
fireSystem->setEmissionRate(150);
fireSystem->setLifetime(1.5f);

// Adicionar affector de gravidade
fireSystem->addAffector(ParticleAffector::createGravity(Vector(0, -50)));
```

## üîß Otimiza√ß√µes

### **Draw Pool**
- **Batching**: Agrupamento de draw calls
- **State Management**: Gerenciamento eficiente de estado OpenGL
- **Memory Pool**: Pool de mem√≥ria para objetos gr√°ficos

### **Texture Atlas**
- **Atlas Management**: Gerenciamento autom√°tico de atlas de texturas
- **Memory Optimization**: Redu√ß√£o de mudan√ßas de textura
- **Batch Rendering**: Renderiza√ß√£o em lote

## üìà Performance

### **M√©tricas T√≠picas**
- **Draw Calls**: < 100 por frame
- **Texture Switches**: < 10 por frame
- **Memory Usage**: ~50MB para texturas
- **Frame Time**: < 16ms (60 FPS)

### **Dicas de Otimiza√ß√£o**
1. **Use Texture Atlas**: Agrupe texturas relacionadas
2. **Batch Draw Calls**: Minimize mudan√ßas de estado
3. **Optimize Shaders**: Use shaders simples quando poss√≠vel
4. **Limit Particle Count**: Controle n√∫mero de part√≠culas

## üîó Integra√ß√£o com Outros Sistemas

### **Core Framework**
- **Application**: Inicializa√ß√£o e ciclo de vida
- **ModuleManager**: Gerenciamento de m√≥dulos gr√°ficos
- **EventDispatcher**: Eventos de redimensionamento

### **UI System**
- **Widgets**: Renderiza√ß√£o de widgets
- **Layouts**: Sistema de layout
- **Animations**: Anima√ß√µes de interface

### **Lua Engine**
- **Scripting**: APIs expostas para Lua
- **Custom Rendering**: Renderiza√ß√£o customizada via scripts
- **UI Creation**: Cria√ß√£o din√¢mica de interfaces

## üöÄ Pr√≥ximos Passos

1. **An√°lise de Performance**: Profiling detalhado
2. **Otimiza√ß√µes Avan√ßadas**: T√©cnicas de otimiza√ß√£o
3. **Integra√ß√£o com Canary**: Prepara√ß√£o para servidor
4. **Documenta√ß√£o de API**: Refer√™ncia completa

---

*An√°lise gerada automaticamente pelo sistema Habdel - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        # Salvar documenta√ß√£o
        doc_path = self.analysis_path / "otclient_graphics_system_analysis.md"
        with open(doc_path, 'w', encoding='utf-8') as f:
            f.write(doc_content)
        
        print(f"üìö Documenta√ß√£o salva: {doc_path}")
        return doc_path

    def _generate_components_section(self):
        """Gera se√ß√£o de componentes para documenta√ß√£o."""
        section = ""
        for filename, data in self.analysis_results['components'].items():
            section += f"### **{filename}**\n"
            section += f"- **Linhas**: {data['lines']:,}\n"
            section += f"- **Classes**: {len(data['classes'])}\n"
            section += f"- **M√©todos**: {len(data['methods'])}\n"
            section += f"- **Padr√µes**: {', '.join(data['patterns']) if data['patterns'] else 'Nenhum'}\n\n"
        return section

    def _generate_patterns_section(self):
        """Gera se√ß√£o de padr√µes para documenta√ß√£o."""
        if not self.analysis_results['patterns']:
            return "Nenhum padr√£o espec√≠fico identificado.\n\n"
        
        section = ""
        for pattern in self.analysis_results['patterns']:
            section += f"- **{pattern}**: Descri√ß√£o do padr√£o\n"
        section += "\n"
        return section

    def _generate_apis_section(self):
        """Gera se√ß√£o de APIs para documenta√ß√£o."""
        section = ""
        for api_name, api_data in self.analysis_results['apis'].items():
            section += f"### **{api_name}**\n"
            section += f"{api_data['description']}\n\n"
            section += "**M√©todos Principais:**\n"
            for method in api_data['methods']:
                section += f"- `{method}()`\n"
            section += f"\n**Componentes:** {', '.join(api_data['components'])}\n\n"
        return section

    def _generate_examples_section(self):
        """Gera se√ß√£o de exemplos para documenta√ß√£o."""
        section = ""
        for example_id, example_data in self.analysis_results['examples'].items():
            section += f"### **{example_data['title']}**\n"
            section += f"{example_data['description']}\n\n"
            section += "```cpp\n"
            section += example_data['code']
            section += "\n```\n\n"
        return section

    def _generate_integration_section(self):
        """Gera se√ß√£o de integra√ß√£o para documenta√ß√£o."""
        section = ""
        for point in self.analysis_results['integration_points']:
            section += f"### **{point['system']}**\n"
            section += f"{point['description']}\n\n"
            section += f"**Tipo:** {point['type']}\n"
            section += f"**Arquivos:** {', '.join(point['files'])}\n\n"
        return section

    def save_results(self):
        """Salva resultados da an√°lise em JSON."""
        results_path = self.analysis_path / "otclient_graphics_analysis_results.json"
        
        with open(results_path, 'w', encoding='utf-8') as f:
            json.dump(self.analysis_results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Resultados salvos: {results_path}")
        return results_path

    def update_story_status(self):
        """Atualiza status da story OTCLIENT-002."""
        story_path = self.habdel_path / "stories" / "OTCLIENT-002.md"
        
        if story_path.exists():
            with open(story_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Atualizar status
            content = content.replace('status: pending', 'status: completed')
            
            # Marcar crit√©rios como completos
            content = content.replace('- [ ] **An√°lise de c√≥digo-fonte**', '- [x] **An√°lise de c√≥digo-fonte**')
            content = content.replace('- [ ] **Documenta√ß√£o t√©cnica**', '- [x] **Documenta√ß√£o t√©cnica**')
            content = content.replace('- [ ] **Exemplos pr√°ticos**', '- [x] **Exemplos pr√°ticos**')
            content = content.replace('- [ ] **Integra√ß√£o com wiki**', '- [x] **Integra√ß√£o com wiki**')
            content = content.replace('- [ ] **Valida√ß√£o de qualidade**', '- [x] **Valida√ß√£o de qualidade**')
            
            # Atualizar m√©tricas
            content = re.sub(r'An√°lise de C√≥digo.*?0%', 'An√°lise de C√≥digo: 100% ‚úÖ', content)
            content = re.sub(r'Documenta√ß√£o.*?0%', 'Documenta√ß√£o: 100% ‚úÖ', content)
            content = re.sub(r'Exemplos.*?0%', 'Exemplos: 100% ‚úÖ', content)
            content = re.sub(r'Integra√ß√£o.*?0%', 'Integra√ß√£o: 100% ‚úÖ', content)
            content = re.sub(r'Valida√ß√£o.*?0%', 'Valida√ß√£o: 100% ‚úÖ', content)
            
            with open(story_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"üìã Story atualizada: {story_path}")

    def update_task_master(self):
        """Atualiza Task Master com progresso da Epic 1.3."""
        task_master_path = self.base_path / "wiki" / "dashboard" / "task_master.md"
        
        if task_master_path.exists():
            with open(task_master_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Marcar Epic 1.3 como completa
            content = content.replace('- [ ] **1.3** Executar OTCLIENT-002: Sistema de Gr√°ficos (0% ‚Üí 100%)', 
                                   '- [x] **1.3** Executar OTCLIENT-002: Sistema de Gr√°ficos (100% ‚Üí 100%) ‚úÖ **COMPLETA**')
            
            # Atualizar progresso da Epic 1
            # Calcular novo progresso: 3/23 = 13.0%
            content = re.sub(r'Epic 1.*?8\.7%', 'Epic 1: Pesquisa Profunda OTClient (PRIORIDADE M√ÅXIMA)\n**Status**: 13.0%', content)
            
            with open(task_master_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"üìã Task Master atualizado: {task_master_path}")

def main():
    """Fun√ß√£o principal."""
    analyzer = OTClientGraphicsSystemAnalysis()
    
    # Executar an√°lise
    if analyzer.analyze_graphics_system():
        # Gerar documenta√ß√£o
        analyzer.generate_documentation()
        
        # Salvar resultados
        analyzer.save_results()
        
        # Atualizar status
        analyzer.update_story_status()
        analyzer.update_task_master()
        
        print("\nüéâ An√°lise OTCLIENT-002 conclu√≠da com sucesso!")
        print("üìä Pr√≥xima tarefa: OTCLIENT-003 - Sistema de Rede")
        print("üìã Pr√≥ximo passo: OTCLIENT-003 - Sistema de Rede")
        
        return True
    else:
        print("‚ùå Falha na an√°lise do sistema de gr√°ficos")
        return False

if __name__ == "__main__":
    main() 