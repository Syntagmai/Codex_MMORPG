#!/usr/bin/env python3
"""
Epic 18 Creator Agent - Epic 17 Task 17.8
Cria Epic 18 com plano detalhado de corre√ß√£o dos problemas identificados
"""

import os
import json
import re
from datetime import datetime
from pathlib import Path

class Epic18Creator:
    def __init__(self, project_root):
        self.project_root = Path(project_root)
        self.audit_reports_dir = self.project_root / "wiki" / "docs" / "audit_reports"
        self.epic_18_data = {
            "epic_number": 18,
            "name": "Corre√ß√£o e Otimiza√ß√£o do Sistema",
            "status": "0%",
            "priority": "Cr√≠tica",
            "objective": "Corrigir todos os problemas identificados na Epic 17 e otimizar o sistema",
            "created_date": datetime.now().isoformat(),
            "tasks": [],
            "critical_issues": [],
            "optimization_opportunities": [],
            "security_fixes": [],
            "performance_improvements": [],
            "documentation_updates": [],
            "integration_fixes": []
        }
    
    def load_audit_reports(self):
        """Carrega todos os relat√≥rios de auditoria da Epic 17"""
        print("üìä Carregando relat√≥rios de auditoria da Epic 17...")
        
        audit_files = [
            "file_structure_audit_report.json",
            "python_audit_report.json", 
            "config_audit_report.json",
            "documentation_audit_report.json",
            "integration_audit_report.json",
            "performance_audit_report.json",
            "security_audit_report.json"
        ]
        
        reports = {}
        for audit_file in audit_files:
            file_path = self.audit_reports_dir / audit_file
            if file_path.exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        reports[audit_file] = json.load(f)
                    print(f"‚úÖ Carregado: {audit_file}")
                except Exception as e:
                    print(f"‚ùå Erro ao carregar {audit_file}: {e}")
            else:
                print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {audit_file}")
        
        return reports
    
    def analyze_critical_issues(self, reports):
        """Analisa problemas cr√≠ticos identificados"""
        print("üîç Analisando problemas cr√≠ticos...")
        
        critical_issues = []
        
        # Problemas de seguran√ßa (alta prioridade)
        if "security_audit_report.json" in reports:
            security_data = reports["security_audit_report.json"]
            # Extrair problemas de seguran√ßa baseado na estrutura real
            auth_issues = security_data.get("authentication_issues", [])
            permission_issues = security_data.get("permission_issues", [])
            validation_issues = security_data.get("validation_issues", [])
            
            # Adicionar problemas cr√≠ticos de autentica√ß√£o
            for issue in auth_issues[:5]:
                critical_issues.append({
                    "type": "security_auth",
                    "description": f"Problema de autentica√ß√£o: {issue.get('type', 'N/A')}",
                    "file": issue.get("file", "N/A"),
                    "priority": "Alta",
                    "epic_18_task": "18.1"
                })
            
            # Adicionar problemas de permiss√£o
            for issue in permission_issues[:5]:
                critical_issues.append({
                    "type": "security_permission",
                    "description": f"Problema de permiss√£o: {issue.get('type', 'N/A')}",
                    "file": issue.get("file", "N/A"),
                    "priority": "Alta",
                    "epic_18_task": "18.1"
                })
        
        # Erros de sintaxe Python (alta prioridade)
        if "python_audit_report.json" in reports:
            python_data = reports["python_audit_report.json"]
            syntax_errors = python_data.get("syntax_errors", [])
            for error in syntax_errors[:10]:  # Top 10 mais cr√≠ticos
                critical_issues.append({
                    "type": "python_syntax",
                    "description": f"Erro de sintaxe Python: {error.get('error', 'N/A')}",
                    "file": error.get("file", "N/A"),
                    "line": error.get("line", "N/A"),
                    "priority": "Alta",
                    "epic_18_task": "18.2"
                })
        
        # Arquivos grandes que impactam performance
        if "performance_audit_report.json" in reports:
            perf_data = reports["performance_audit_report.json"]
            large_files = perf_data.get("large_files", [])
            for file_info in large_files[:5]:  # Top 5 maiores
                critical_issues.append({
                    "type": "performance_large_file",
                    "description": f"Arquivo muito grande: {file_info.get('size_mb', 0)} MB",
                    "file": file_info.get("path", "N/A"),
                    "priority": "M√©dia",
                    "epic_18_task": "18.3"
                })
        
        # Depend√™ncias circulares cr√≠ticas
        if "integration_audit_report.json" in reports:
            integration_data = reports["integration_audit_report.json"]
            circular_deps = integration_data.get("circular_dependencies", [])
            for dep in circular_deps[:5]:  # Top 5 mais cr√≠ticas
                critical_issues.append({
                    "type": "integration_circular",
                    "description": f"Depend√™ncia circular: {dep.get('description', 'N/A')}",
                    "files": dep.get("files", []),
                    "priority": "Alta",
                    "epic_18_task": "18.4"
                })
        
        self.epic_18_data["critical_issues"] = critical_issues
        return critical_issues
    
    def create_optimization_tasks(self, reports):
        """Cria tasks de otimiza√ß√£o baseadas nos relat√≥rios"""
        print("üîß Criando tasks de otimiza√ß√£o...")
        
        tasks = []
        task_counter = 1
        
        # Task 18.1: Corre√ß√£o de Vulnerabilidades de Seguran√ßa
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Corre√ß√£o de Vulnerabilidades de Seguran√ßa",
            "description": "Corrigir vulnerabilidades de alta e m√©dia severidade identificadas",
            "priority": "Cr√≠tica",
            "estimated_hours": 16,
            "dependencies": [],
            "subtasks": [
                "Corrigir 5 vulnerabilidades de alta severidade",
                "Corrigir 50 vulnerabilidades de m√©dia severidade",
                "Implementar valida√ß√µes de entrada robustas",
                "Corrigir problemas de autentica√ß√£o",
                "Corrigir problemas de permiss√£o",
                "Proteger dados sens√≠veis expostos"
            ]
        })
        task_counter += 1
        
        # Task 18.2: Corre√ß√£o de Erros de Sintaxe Python
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Corre√ß√£o de Erros de Sintaxe Python",
            "description": "Corrigir erros de sintaxe e imports obsoletos em scripts Python",
            "priority": "Alta",
            "estimated_hours": 12,
            "dependencies": [],
            "subtasks": [
                "Corrigir 389 erros de sintaxe Python",
                "Remover 418 imports obsoletos unicode_aliases",
                "Instalar 753 depend√™ncias faltantes",
                "Validar sintaxe de todos os scripts",
                "Testar execu√ß√£o dos scripts corrigidos"
            ]
        })
        task_counter += 1
        
        # Task 18.3: Otimiza√ß√£o de Performance
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Otimiza√ß√£o de Performance e Recursos",
            "description": "Otimizar arquivos grandes, scripts lentos e gargalos identificados",
            "priority": "Alta",
            "estimated_hours": 20,
            "dependencies": ["18.2"],
            "subtasks": [
                "Otimizar 20 arquivos grandes (>1MB)",
                "Melhorar 15 scripts lentos identificados",
                "Corrigir 20 gargalos potenciais",
                "Implementar 15 oportunidades de otimiza√ß√£o",
                "Reduzir uso de mem√≥ria e CPU",
                "Otimizar opera√ß√µes de I/O"
            ]
        })
        task_counter += 1
        
        # Task 18.4: Corre√ß√£o de Integra√ß√µes e Depend√™ncias
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Corre√ß√£o de Integra√ß√µes e Depend√™ncias",
            "description": "Corrigir depend√™ncias circulares, interfaces quebradas e integra√ß√µes cr√≠ticas",
            "priority": "Alta",
            "estimated_hours": 18,
            "dependencies": ["18.2"],
            "subtasks": [
                "Resolver 661 depend√™ncias circulares",
                "Corrigir 223 interfaces quebradas",
                "Otimizar 424 integra√ß√µes cr√≠ticas",
                "Melhorar 795 fluxos de dados",
                "Corrigir 88 endpoints de API",
                "Validar todas as integra√ß√µes"
            ]
        })
        task_counter += 1
        
        # Task 18.5: Limpeza de Estrutura de Arquivos
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Limpeza de Estrutura de Arquivos",
            "description": "Remover itens obsoletos, diret√≥rios vazios e problemas de nomenclatura",
            "priority": "M√©dia",
            "estimated_hours": 8,
            "dependencies": [],
            "subtasks": [
                "Remover 104 itens obsoletos",
                "Limpar 137 diret√≥rios vazios",
                "Corrigir 4 problemas de nomenclatura",
                "Organizar estrutura de pastas",
                "Validar organiza√ß√£o final"
            ]
        })
        task_counter += 1
        
        # Task 18.6: Corre√ß√£o de Configura√ß√µes
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Corre√ß√£o de Configura√ß√µes e Regras",
            "description": "Corrigir configura√ß√µes obsoletas e par√¢metros inconsistentes",
            "priority": "M√©dia",
            "estimated_hours": 6,
            "dependencies": [],
            "subtasks": [
                "Remover 131 configura√ß√µes obsoletas",
                "Corrigir 4 par√¢metros inconsistentes",
                "Resolver 109 problemas gerais de configura√ß√£o",
                "Validar todas as configura√ß√µes",
                "Testar funcionamento do sistema"
            ]
        })
        task_counter += 1
        
        # Task 18.7: Corre√ß√£o de Documenta√ß√£o
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Corre√ß√£o de Documenta√ß√£o e Wikis",
            "description": "Corrigir links quebrados, documentos incompletos e problemas de qualidade",
            "priority": "M√©dia",
            "estimated_hours": 10,
            "dependencies": [],
            "subtasks": [
                "Corrigir 7,208 links quebrados",
                "Completar 239 documentos incompletos",
                "Criar 2 documenta√ß√µes cr√≠ticas faltantes (CHANGELOG.md, LICENSE)",
                "Corrigir 21 problemas de qualidade",
                "Validar toda a documenta√ß√£o"
            ]
        })
        task_counter += 1
        
        # Task 18.8: Atualiza√ß√£o do README.md Principal
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Atualiza√ß√£o do README.md Principal",
            "description": "Criar vers√£o est√°vel e transparente do README.md principal",
            "priority": "Alta",
            "estimated_hours": 4,
            "dependencies": ["18.7"],
            "subtasks": [
                "Criar estrutura clara e organizada",
                "Documentar todas as funcionalidades",
                "Incluir guias de instala√ß√£o e uso",
                "Adicionar exemplos pr√°ticos",
                "Validar clareza e transpar√™ncia"
            ]
        })
        task_counter += 1
        
        # Task 18.9: Testes e Valida√ß√£o
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Testes e Valida√ß√£o Completa",
            "description": "Realizar testes abrangentes para validar todas as corre√ß√µes",
            "priority": "Alta",
            "estimated_hours": 12,
            "dependencies": ["18.1", "18.2", "18.3", "18.4", "18.5", "18.6", "18.7", "18.8"],
            "subtasks": [
                "Testes de seguran√ßa",
                "Testes de performance",
                "Testes de integra√ß√£o",
                "Testes de documenta√ß√£o",
                "Valida√ß√£o final do sistema"
            ]
        })
        task_counter += 1
        
        # Task 18.10: Relat√≥rio Final de Corre√ß√£o
        tasks.append({
            "task_number": f"18.{task_counter}",
            "name": "Relat√≥rio Final de Corre√ß√£o e Otimiza√ß√£o",
            "description": "Gerar relat√≥rio final consolidado com todas as corre√ß√µes realizadas",
            "priority": "M√©dia",
            "estimated_hours": 3,
            "dependencies": ["18.9"],
            "subtasks": [
                "Consolidar resultados de todas as corre√ß√µes",
                "Documentar melhorias implementadas",
                "Criar m√©tricas de antes e depois",
                "Gerar relat√≥rio executivo",
                "Arquivar Epic 18 como conclu√≠da"
            ]
        })
        
        self.epic_18_data["tasks"] = tasks
        return tasks
    
    def calculate_metrics(self):
        """Calcula m√©tricas da Epic 18"""
        print("üìä Calculando m√©tricas da Epic 18...")
        
        total_tasks = len(self.epic_18_data["tasks"])
        total_hours = sum(task.get("estimated_hours", 0) for task in self.epic_18_data["tasks"])
        critical_issues = len([issue for issue in self.epic_18_data["critical_issues"] if issue.get("priority") == "Cr√≠tica"])
        
        metrics = {
            "total_tasks": total_tasks,
            "total_estimated_hours": total_hours,
            "critical_issues_to_fix": critical_issues,
            "priority_distribution": {
                "Cr√≠tica": len([task for task in self.epic_18_data["tasks"] if task.get("priority") == "Cr√≠tica"]),
                "Alta": len([task for task in self.epic_18_data["tasks"] if task.get("priority") == "Alta"]),
                "M√©dia": len([task for task in self.epic_18_data["tasks"] if task.get("priority") == "M√©dia"]),
                "Baixa": len([task for task in self.epic_18_data["tasks"] if task.get("priority") == "Baixa"])
            }
        }
        
        self.epic_18_data["metrics"] = metrics
        return metrics
    
    def create_epic_18_markdown(self):
        """Cria o arquivo markdown da Epic 18"""
        print("üìù Criando arquivo markdown da Epic 18...")
        
        epic_18_content = f"""# üõ†Ô∏è Epic 18: Corre√ß√£o e Otimiza√ß√£o do Sistema

## üìã **INFORMA√á√ïES GERAIS**

- **Status**: 0%
- **Prioridade**: Cr√≠tica
- **Data de Cria√ß√£o**: {self.epic_18_data['created_date']}
- **Tempo Estimado**: {self.epic_18_data['metrics']['total_estimated_hours']} horas
- **Total de Tasks**: {self.epic_18_data['metrics']['total_tasks']}

## üéØ **OBJETIVO**

{self.epic_18_data['objective']}

## üìä **M√âTRICAS**

- **Tasks Cr√≠ticas**: {self.epic_18_data['metrics']['priority_distribution']['Cr√≠tica']}
- **Tasks Altas**: {self.epic_18_data['metrics']['priority_distribution']['Alta']}
- **Tasks M√©dias**: {self.epic_18_data['metrics']['priority_distribution']['M√©dia']}
- **Problemas Cr√≠ticos a Corrigir**: {self.epic_18_data['metrics']['critical_issues_to_fix']}

## üö® **PROBLEMAS CR√çTICOS IDENTIFICADOS**

"""
        
        for issue in self.epic_18_data["critical_issues"][:10]:  # Top 10
            epic_18_content += f"- **{issue['type'].upper()}**: {issue['description']} (Prioridade: {issue['priority']})\n"
        
        epic_18_content += "\n## üìã **TASKS DA EPIC 18**\n\n"
        
        for task in self.epic_18_data["tasks"]:
            epic_18_content += f"""### **{task['task_number']} {task['name']}**
- **Status**: ‚è≥ PENDENTE
- **Progresso**: 0%
- **Prioridade**: {task['priority']}
- **Tempo Estimado**: {task['estimated_hours']} horas
- **Depend√™ncias**: {', '.join(task['dependencies']) if task['dependencies'] else 'Nenhuma'}

**Descri√ß√£o**: {task['description']}

**Subtasks:**
"""
            for subtask in task['subtasks']:
                epic_18_content += f"- [ ] {subtask}\n"
            
            epic_18_content += "\n"
        
        epic_18_content += """## üéØ **CRIT√âRIOS DE CONCLUS√ÉO**

- [ ] Todas as vulnerabilidades de seguran√ßa corrigidas
- [ ] Todos os erros de sintaxe Python resolvidos
- [ ] Performance otimizada conforme m√©tricas estabelecidas
- [ ] Integra√ß√µes funcionando corretamente
- [ ] Documenta√ß√£o completa e atualizada
- [ ] README.md principal atualizado e transparente
- [ ] Testes de valida√ß√£o passando
- [ ] Relat√≥rio final consolidado

## üìà **M√âTRICAS DE SUCESSO**

- **Score de Seguran√ßa**: > 80/100
- **Erros de Sintaxe**: 0
- **Performance**: Melhoria de pelo menos 30%
- **Documenta√ß√£o**: 100% dos links funcionando
- **Integra√ß√µes**: 100% funcionando corretamente

---

> [!info] **EPIC 18 CRIADA**
> Esta Epic foi criada automaticamente pelo Epic 18 Creator Agent baseado nos resultados da Epic 17.
> Todas as tasks foram planejadas para corrigir os problemas identificados nas auditorias.
"""
        
        # Salvar arquivo da Epic 18
        epic_18_file = self.project_root / "wiki" / "dashboard" / "epic_18_correction_plan.md"
        with open(epic_18_file, 'w', encoding='utf-8') as f:
            f.write(epic_18_content)
        
        print(f"‚úÖ Epic 18 criada: {epic_18_file}")
        return epic_18_file
    
    def update_task_master(self):
        """Atualiza o task_master.md com a Epic 18"""
        print("üìã Atualizando task_master.md com Epic 18...")
        
        task_master_file = self.project_root / "wiki" / "dashboard" / "task_master.md"
        
        if not task_master_file.exists():
            print("‚ùå task_master.md n√£o encontrado")
            return False
        
        try:
            with open(task_master_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Adicionar Epic 18 ap√≥s a Epic 17
            epic_17_section = "## üéØ **EPIC 17: VERIFICA√á√ÉO GERAL COMPLETA DO SISTEMA**"
            epic_18_section = f"""

## üõ†Ô∏è **EPIC 18: CORRE√á√ÉO E OTIMIZA√á√ÉO DO SISTEMA**

### **Status**: 0%
### **Prioridade**: Cr√≠tica
### **Objetivo**: {self.epic_18_data['objective']}

### **Tasks da Epic 18:**

"""
            
            for task in self.epic_18_data["tasks"]:
                epic_18_section += f"""- [ ] **{task['task_number']}** {task['name']} (0% ‚Üí 0%) ‚è≥ **PENDENTE**
  - **Descri√ß√£o**: {task['description']}
  - **Prioridade**: {task['priority']}
  - **Tempo Estimado**: {task['estimated_hours']} horas
  - **Depend√™ncias**: {', '.join(task['dependencies']) if task['dependencies'] else 'Nenhuma'}

"""
            
            # Inserir Epic 18 ap√≥s Epic 17
            if epic_17_section in content:
                new_content = content.replace(epic_17_section, epic_17_section + epic_18_section)
                
                with open(task_master_file, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print("‚úÖ task_master.md atualizado com Epic 18")
                return True
            else:
                print("‚ùå Se√ß√£o Epic 17 n√£o encontrada no task_master.md")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao atualizar task_master.md: {e}")
            return False
    
    def create_json_report(self):
        """Cria relat√≥rio JSON da Epic 18"""
        print("üìä Criando relat√≥rio JSON da Epic 18...")
        
        report_file = self.audit_reports_dir / "epic_18_creation_report.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.epic_18_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Relat√≥rio JSON criado: {report_file}")
        return report_file
    
    def run_creation(self):
        """Executa a cria√ß√£o completa da Epic 18"""
        print("üöÄ Iniciando cria√ß√£o da Epic 18...")
        
        # Carregar relat√≥rios de auditoria
        reports = self.load_audit_reports()
        
        # Analisar problemas cr√≠ticos
        critical_issues = self.analyze_critical_issues(reports)
        
        # Criar tasks de otimiza√ß√£o
        tasks = self.create_optimization_tasks(reports)
        
        # Calcular m√©tricas
        metrics = self.calculate_metrics()
        
        # Criar arquivo markdown
        epic_18_file = self.create_epic_18_markdown()
        
        # Atualizar task_master.md
        task_master_updated = self.update_task_master()
        
        # Criar relat√≥rio JSON
        json_report = self.create_json_report()
        
        # Resumo final
        print("\n" + "="*60)
        print("üìä RESUMO DA CRIA√á√ÉO DA EPIC 18")
        print("="*60)
        print(f"üìã Total de tasks criadas: {len(tasks)}")
        print(f"‚è∞ Tempo total estimado: {metrics['total_estimated_hours']} horas")
        print(f"üö® Problemas cr√≠ticos identificados: {len(critical_issues)}")
        print(f"üìù Arquivo Epic 18 criado: {epic_18_file}")
        print(f"üìã Task Master atualizado: {'‚úÖ' if task_master_updated else '‚ùå'}")
        print(f"üìä Relat√≥rio JSON criado: {json_report}")
        print("="*60)
        
        return {
            "epic_18_file": str(epic_18_file),
            "task_master_updated": task_master_updated,
            "json_report": str(json_report),
            "total_tasks": len(tasks),
            "total_hours": metrics['total_estimated_hours'],
            "critical_issues": len(critical_issues)
        }

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        project_root = sys.argv[1]
    else:
        project_root = "."
    
    creator = Epic18Creator(project_root)
    result = creator.run_creation() 