#!/usr/bin/env python3
"""
Quality Assurance Agent - Sistema de Valida√ß√£o e Teste
Respons√°vel por validar e testar o sistema de workflow de aprendizado.
"""

import os
import sys
import json
import argparse
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

# Importar utilit√°rio de caminhos absolutos
try:
    from absolute_path_utility import get_path, create_file_safely, log_message
except ImportError:
    def get_path(path_name: str):
        return None
    def create_file_safely(path_name: str, filename: str, content: str):
        return False
    def log_message(message: str, level: str = "INFO"):
        print(f"{level}: {message}")


class QualityAssuranceAgent:
    """
    Agente respons√°vel por validar e testar o sistema de workflow de aprendizado.
    """
    
    def __init__(self):
        # Configurar logging
        log_path = get_path('log')
        if log_path:
            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s - %(levelname)s - %(message)s',
                handlers=[
                    logging.FileHandler(log_path / "quality_assurance_agent.log"),
                    logging.StreamHandler()
                ]
            )
        self.logger = logging.getLogger(__name__)
        
        self.base_path = get_path('wiki')
        if not self.base_path:
            self.base_path = Path('wiki')
        self.workflows_path = self.base_path / "workflows"
        self.courses_path = self.base_path / "docs" / "courses"
        self.certificates_path = self.base_path / "certificates"
        
        self.logger.info("Quality Assurance Agent inicializado")
        
    def validate_workflow(self) -> bool:
        """
        Valida o sistema de workflow de aprendizado completo.
        
        Returns:
            bool: True se valida√ß√£o bem-sucedida
        """
        try:
            self.logger.info("üîç Iniciando valida√ß√£o do sistema de workflow...")
            
            validation_results = {
                'workflow_config': False,
                'automation_system': False,
                'certification_system': False,
                'courses_structure': False,
                'certificates_directory': False,
                'integration_tests': False
            }
            
            # 1. Validar configura√ß√£o do workflow
            self.logger.info("üìã Validando configura√ß√£o do workflow...")
            workflow_config_path = self.workflows_path / 'learning_workflow_config.json'
            if workflow_config_path.exists():
                try:
                    with open(workflow_config_path, 'r', encoding='utf-8') as f:
                        workflow_config = json.load(f)
                    
                    # Validar estrutura do workflow
                    required_keys = ['workflow_id', 'name', 'version', 'status', 'features', 'execution_rules', 'courses']
                    if all(key in workflow_config for key in required_keys):
                        validation_results['workflow_config'] = True
                        self.logger.info("‚úÖ Configura√ß√£o do workflow v√°lida")
                    else:
                        self.logger.error("‚ùå Configura√ß√£o do workflow inv√°lida")
                except Exception as e:
                    self.logger.error(f"‚ùå Erro ao validar workflow: {e}")
            else:
                self.logger.error("‚ùå Arquivo de configura√ß√£o do workflow n√£o encontrado")
            
            # 2. Validar sistema de automa√ß√£o
            self.logger.info("ü§ñ Validando sistema de automa√ß√£o...")
            automation_path = self.workflows_path / 'automation_system.json'
            if automation_path.exists():
                try:
                    with open(automation_path, 'r', encoding='utf-8') as f:
                        automation_config = json.load(f)
                    
                    # Validar estrutura da automa√ß√£o
                    required_keys = ['scheduler', 'progress_tracker', 'certification_system']
                    if all(key in automation_config for key in required_keys):
                        validation_results['automation_system'] = True
                        self.logger.info("‚úÖ Sistema de automa√ß√£o v√°lido")
                    else:
                        self.logger.error("‚ùå Sistema de automa√ß√£o inv√°lido")
                except Exception as e:
                    self.logger.error(f"‚ùå Erro ao validar automa√ß√£o: {e}")
            else:
                self.logger.error("‚ùå Arquivo de automa√ß√£o n√£o encontrado")
            
            # 3. Validar sistema de certifica√ß√£o
            self.logger.info("üèÜ Validando sistema de certifica√ß√£o...")
            certification_path = self.workflows_path / 'certification_system.json'
            if certification_path.exists():
                try:
                    with open(certification_path, 'r', encoding='utf-8') as f:
                        certification_config = json.load(f)
                    
                    # Validar estrutura da certifica√ß√£o
                    required_keys = ['certification_id', 'name', 'version', 'status', 'certification_types', 'badge_system']
                    if all(key in certification_config for key in required_keys):
                        validation_results['certification_system'] = True
                        self.logger.info("‚úÖ Sistema de certifica√ß√£o v√°lido")
                    else:
                        self.logger.error("‚ùå Sistema de certifica√ß√£o inv√°lido")
                except Exception as e:
                    self.logger.error(f"‚ùå Erro ao validar certifica√ß√£o: {e}")
            else:
                self.logger.error("‚ùå Arquivo de certifica√ß√£o n√£o encontrado")
            
            # 4. Validar estrutura de cursos
            self.logger.info("üìö Validando estrutura de cursos...")
            if self.courses_path.exists():
                # Verificar se h√° cursos dispon√≠veis
                course_dirs = [d for d in self.courses_path.iterdir() if d.is_dir()]
                if len(course_dirs) > 0:
                    validation_results['courses_structure'] = True
                    self.logger.info(f"‚úÖ Estrutura de cursos v√°lida ({len(course_dirs)} cursos encontrados)")
                else:
                    self.logger.error("‚ùå Nenhum curso encontrado")
            else:
                self.logger.error("‚ùå Diret√≥rio de cursos n√£o encontrado")
            
            # 5. Validar diret√≥rio de certificados
            self.logger.info("üìÅ Validando diret√≥rio de certificados...")
            if self.certificates_path.exists():
                validation_results['certificates_directory'] = True
                self.logger.info("‚úÖ Diret√≥rio de certificados v√°lido")
            else:
                self.logger.error("‚ùå Diret√≥rio de certificados n√£o encontrado")
            
            # 6. Testes de integra√ß√£o
            self.logger.info("üîó Executando testes de integra√ß√£o...")
            integration_success = self.run_integration_tests()
            validation_results['integration_tests'] = integration_success
            
            # 7. Gerar relat√≥rio de valida√ß√£o
            validation_report = self.generate_validation_report(validation_results)
            
            # 8. Salvar relat√≥rio
            report_path = self.save_validation_report(validation_report)
            
            # 9. Calcular score de valida√ß√£o
            total_tests = len(validation_results)
            passed_tests = sum(validation_results.values())
            validation_score = (passed_tests / total_tests) * 100
            
            self.logger.info(f"üìä Score de valida√ß√£o: {validation_score:.1f}% ({passed_tests}/{total_tests})")
            self.logger.info(f"üìã Relat√≥rio salvo em: {report_path}")
            
            if validation_score >= 80:
                self.logger.info("‚úÖ Sistema de workflow validado com sucesso!")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Sistema de workflow com problemas identificados")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na valida√ß√£o do workflow: {e}")
            return False
    
    def run_integration_tests(self) -> bool:
        """
        Executa testes de integra√ß√£o do sistema.
        
        Returns:
            bool: True se testes passaram
        """
        try:
            self.logger.info("üß™ Executando testes de integra√ß√£o...")
            
            test_results = {
                'workflow_automation_integration': False,
                'certification_workflow_integration': False,
                'courses_certification_integration': False,
                'file_permissions': False,
                'json_validation': False
            }
            
            # Teste 1: Integra√ß√£o workflow-automa√ß√£o
            try:
                workflow_config_path = self.workflows_path / 'learning_workflow_config.json'
                automation_path = self.workflows_path / 'automation_system.json'
                
                if workflow_config_path.exists() and automation_path.exists():
                    with open(workflow_config_path, 'r') as f:
                        workflow = json.load(f)
                    with open(automation_path, 'r') as f:
                        automation = json.load(f)
                    
                    # Verificar se as configura√ß√µes s√£o compat√≠veis
                    if workflow.get('status') == 'active' and automation.get('scheduler'):
                        test_results['workflow_automation_integration'] = True
                        self.logger.info("‚úÖ Integra√ß√£o workflow-automa√ß√£o: OK")
                    else:
                        self.logger.error("‚ùå Integra√ß√£o workflow-automa√ß√£o: FALHA")
                else:
                    self.logger.error("‚ùå Arquivos necess√°rios n√£o encontrados")
            except Exception as e:
                self.logger.error(f"‚ùå Erro no teste workflow-automa√ß√£o: {e}")
            
            # Teste 2: Integra√ß√£o certifica√ß√£o-workflow
            try:
                certification_path = self.workflows_path / 'certification_system.json'
                if certification_path.exists():
                    with open(certification_path, 'r') as f:
                        certification = json.load(f)
                    
                    if certification.get('status') == 'active':
                        test_results['certification_workflow_integration'] = True
                        self.logger.info("‚úÖ Integra√ß√£o certifica√ß√£o-workflow: OK")
                    else:
                        self.logger.error("‚ùå Integra√ß√£o certifica√ß√£o-workflow: FALHA")
                else:
                    self.logger.error("‚ùå Arquivo de certifica√ß√£o n√£o encontrado")
            except Exception as e:
                self.logger.error(f"‚ùå Erro no teste certifica√ß√£o-workflow: {e}")
            
            # Teste 3: Integra√ß√£o cursos-certifica√ß√£o
            try:
                if self.courses_path.exists() and self.certificates_path.exists():
                    test_results['courses_certification_integration'] = True
                    self.logger.info("‚úÖ Integra√ß√£o cursos-certifica√ß√£o: OK")
                else:
                    self.logger.error("‚ùå Integra√ß√£o cursos-certifica√ß√£o: FALHA")
            except Exception as e:
                self.logger.error(f"‚ùå Erro no teste cursos-certifica√ß√£o: {e}")
            
            # Teste 4: Permiss√µes de arquivo
            try:
                test_file = self.workflows_path / 'test_permissions.json'
                test_content = '{"test": "permissions"}'
                
                with open(test_file, 'w') as f:
                    f.write(test_content)
                
                with open(test_file, 'r') as f:
                    content = f.read()
                
                if content == test_content:
                    test_results['file_permissions'] = True
                    self.logger.info("‚úÖ Permiss√µes de arquivo: OK")
                else:
                    self.logger.error("‚ùå Permiss√µes de arquivo: FALHA")
                
                # Limpar arquivo de teste
                test_file.unlink()
            except Exception as e:
                self.logger.error(f"‚ùå Erro no teste de permiss√µes: {e}")
            
            # Teste 5: Valida√ß√£o JSON
            try:
                workflow_config_path = self.workflows_path / 'learning_workflow_config.json'
                if workflow_config_path.exists():
                    with open(workflow_config_path, 'r') as f:
                        json.load(f)  # Testa se √© JSON v√°lido
                    test_results['json_validation'] = True
                    self.logger.info("‚úÖ Valida√ß√£o JSON: OK")
                else:
                    self.logger.error("‚ùå Valida√ß√£o JSON: FALHA")
            except Exception as e:
                self.logger.error(f"‚ùå Erro na valida√ß√£o JSON: {e}")
            
            # Calcular resultado geral
            total_tests = len(test_results)
            passed_tests = sum(test_results.values())
            integration_score = (passed_tests / total_tests) * 100
            
            self.logger.info(f"üìä Score de integra√ß√£o: {integration_score:.1f}% ({passed_tests}/{total_tests})")
            
            return integration_score >= 80
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro nos testes de integra√ß√£o: {e}")
            return False
    
    def generate_validation_report(self, results: Dict[str, bool]) -> str:
        """
        Gera relat√≥rio de valida√ß√£o.
        
        Args:
            results: Resultados da valida√ß√£o
            
        Returns:
            str: Relat√≥rio formatado
        """
        total_tests = len(results)
        passed_tests = sum(results.values())
        validation_score = (passed_tests / total_tests) * 100
        
        report = f"""# üîç Relat√≥rio de Valida√ß√£o - Sistema de Workflow

## üìã **Informa√ß√µes Gerais**
- **Data de Valida√ß√£o**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Agente Respons√°vel**: Quality Assurance Agent
- **Total de Testes**: {total_tests}
- **Testes Aprovados**: {passed_tests}
- **Score de Valida√ß√£o**: {validation_score:.1f}%

## üéØ **Resultados dos Testes**

"""
        
        for test_name, result in results.items():
            status = "‚úÖ APROVADO" if result else "‚ùå REPROVADO"
            report += f"""### **{test_name.replace('_', ' ').title()}**
- **Status**: {status}
- **Descri√ß√£o**: {'Teste passou com sucesso' if result else 'Teste falhou'}

"""
        
        report += f"""## üìä **An√°lise de Qualidade**

### **‚úÖ Pontos Fortes:**
"""
        
        for test_name, result in results.items():
            if result:
                report += f"- {test_name.replace('_', ' ').title()}\n"
        
        report += f"""
### **‚ö†Ô∏è Pontos de Aten√ß√£o:**
"""
        
        for test_name, result in results.items():
            if not result:
                report += f"- {test_name.replace('_', ' ').title()}\n"
        
        report += f"""
## üéØ **Recomenda√ß√µes**

"""
        
        if validation_score >= 90:
            report += """### **üü¢ Sistema Excelente:**
- Sistema est√° funcionando perfeitamente
- Manter monitoramento regular
- Considerar expans√£o de funcionalidades
"""
        elif validation_score >= 80:
            report += """### **üü° Sistema Bom:**
- Sistema est√° funcionando adequadamente
- Corrigir pontos de aten√ß√£o identificados
- Melhorar testes de integra√ß√£o
"""
        else:
            report += """### **üî¥ Sistema Precisa de Corre√ß√µes:**
- Corrigir problemas cr√≠ticos identificados
- Revisar configura√ß√µes do sistema
- Executar valida√ß√£o novamente ap√≥s corre√ß√µes
"""
        
        report += f"""
## üìà **M√©tricas de Qualidade**

### **üìä Score Geral**: {validation_score:.1f}%
### **üéØ Status**: {'‚úÖ APROVADO' if validation_score >= 80 else '‚ùå REPROVADO'}
### **üîß A√ß√µes Necess√°rias**: {'Nenhuma' if validation_score >= 80 else 'Corre√ß√µes urgentes'}

---

**Validado por**: Quality Assurance Agent  
**Data**: {datetime.now().isoformat()}  
**Status**: {'üü¢ Sistema Validado' if validation_score >= 80 else 'üî¥ Sistema com Problemas'}
"""
        
        return report
    
    def save_validation_report(self, report: str) -> Path:
        """
        Salva relat√≥rio de valida√ß√£o.
        
        Args:
            report: Conte√∫do do relat√≥rio
            
        Returns:
            Path: Caminho do arquivo salvo
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"workflow_validation_report_{timestamp}.md"
        report_path = self.base_path / "log" / report_filename
        
        report_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        return report_path


def main():
    """Fun√ß√£o principal do agente."""
    parser = argparse.ArgumentParser(description='Quality Assurance Agent')
    parser.add_argument('--validate-workflow', action='store_true',
                       help='Valida o sistema de workflow de aprendizado')
    
    args = parser.parse_args()
    
    agent = QualityAssuranceAgent()
    
    if args.validate_workflow:
        success = agent.validate_workflow()
        if success:
            print("‚úÖ Sistema de workflow validado com sucesso!")
            sys.exit(0)
        else:
            print("‚ùå Falha na valida√ß√£o do sistema de workflow")
            sys.exit(1)
    else:
        parser.print_help()


if __name__ == "__main__":
    main() 