#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé® Module Generator Agent
Respons√°vel por criar varia√ß√µes funcionais de m√≥dulos OTClient
"""

import os
import json
import re
import random
import string
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
from copy import deepcopy

class ModuleGeneratorAgent:
    """Agente especializado em gera√ß√£o de m√≥dulos OTClient"""
    
    def __init__(self, workspace_path: str = None):
        self.workspace_path = workspace_path or os.getcwd()
        # Ajustar caminho para encontrar m√≥dulos na raiz do projeto
        if os.path.basename(self.workspace_path) == "bmad":
            # Se estamos na pasta bmad, subir um n√≠vel
            self.workspace_path = os.path.dirname(self.workspace_path)
        if os.path.basename(self.workspace_path) == "wiki":
            # Se estamos na pasta wiki, subir um n√≠vel
            self.workspace_path = os.path.dirname(self.workspace_path)
        
        self.modules_path = os.path.join(self.workspace_path, "modules")
        self.wiki_path = os.path.join(self.workspace_path, "wiki")
        self.results_path = os.path.join(self.workspace_path, "wiki/bmad/results")
        self.templates_path = os.path.join(self.workspace_path, "wiki/bmad/templates")
        
        # Criar diret√≥rios se n√£o existirem
        os.makedirs(self.results_path, exist_ok=True)
        os.makedirs(os.path.join(self.results_path, "generated_modules"), exist_ok=True)
        os.makedirs(self.templates_path, exist_ok=True)
        
        # Carregar conhecimento da wiki
        self.load_wiki_knowledge()
        
        # Padr√µes de varia√ß√£o
        self.variation_patterns = {
            "function_variations": [
                "add_", "remove_", "update_", "get_", "set_", "toggle_", "reset_",
                "enable_", "disable_", "show_", "hide_", "open_", "close_"
            ],
            "variable_variations": [
                "is_", "has_", "can_", "should_", "will_", "did_", "was_",
                "enabled", "disabled", "visible", "hidden", "active", "inactive"
            ],
            "module_suffixes": [
                "_enhanced", "_improved", "_advanced", "_basic", "_simple",
                "_custom", "_extended", "_modified", "_optimized", "_light"
            ]
        }
    
    def load_wiki_knowledge(self):
        """Carrega conhecimento da wiki para gera√ß√£o"""
        try:
            # Carregar documenta√ß√£o OTClient
            otclient_docs = os.path.join(self.wiki_path, "otclient")
            self.otclient_knowledge = self.load_documentation(otclient_docs)
            
            # Carregar padr√µes conhecidos
            patterns_file = os.path.join(self.wiki_path, "maps", "patterns.json")
            if os.path.exists(patterns_file):
                with open(patterns_file, 'r', encoding='utf-8') as f:
                    self.known_patterns = json.load(f)
            else:
                self.known_patterns = {}
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar conhecimento da wiki: {e}")
            self.otclient_knowledge = {}
            self.known_patterns = {}
    
    def load_documentation(self, docs_path: str) -> Dict[str, Any]:
        """Carrega documenta√ß√£o da pasta especificada"""
        knowledge = {}
        
        if not os.path.exists(docs_path):
            return knowledge
        
        for file_path in Path(docs_path).rglob("*.md"):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    relative_path = str(file_path.relative_to(docs_path))
                    knowledge[relative_path] = content
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar {file_path}: {e}")
        
        return knowledge
    
    def generate_module_variations(self, base_analysis: Dict[str, Any], 
                                 variation_count: int = 3) -> List[Dict[str, Any]]:
        """
        Gera varia√ß√µes de um m√≥dulo baseado na an√°lise
        
        Args:
            base_analysis: An√°lise do m√≥dulo base
            variation_count: N√∫mero de varia√ß√µes a gerar
            
        Returns:
            Lista de varia√ß√µes geradas
        """
        print(f"üé® Gerando {variation_count} varia√ß√µes do m√≥dulo: {base_analysis['module_name']}")
        
        variations = []
        
        for i in range(variation_count):
            variation_name = self.generate_variation_name(base_analysis['module_name'], i)
            
            variation = {
                "variation_id": i + 1,
                "base_module": base_analysis['module_name'],
                "variation_name": variation_name,
                "generation_date": datetime.now().isoformat(),
                "files": {},
                "modifications": {},
                "compatibility_score": 0.0
            }
            
            # Gerar arquivos da varia√ß√£o
            variation["files"] = self.generate_variation_files(base_analysis, variation_name)
            
            # Calcular modifica√ß√µes
            variation["modifications"] = self.calculate_modifications(base_analysis, variation)
            
            # Calcular score de compatibilidade
            variation["compatibility_score"] = self.calculate_compatibility_score(variation)
            
            variations.append(variation)
        
        # Salvar varia√ß√µes
        self.save_variations(base_analysis['module_name'], variations)
        
        return variations
    
    def generate_variation_name(self, base_name: str, variation_id: int) -> str:
        """Gera nome para a varia√ß√£o"""
        suffix = random.choice(self.variation_patterns["module_suffixes"])
        return f"{base_name}{suffix}_{variation_id + 1}"
    
    def generate_variation_files(self, base_analysis: Dict[str, Any], 
                               variation_name: str) -> Dict[str, Any]:
        """Gera arquivos da varia√ß√£o baseado no m√≥dulo original"""
        files = {}
        
        for file_path, file_analysis in base_analysis["files"].items():
            if file_analysis["file_type"] == ".lua":
                files[file_path] = self.generate_lua_variation(file_analysis, variation_name)
            elif file_analysis["file_type"] == ".otmod":
                files[file_path] = self.generate_otmod_variation(file_analysis, variation_name)
            elif file_analysis["file_type"] == ".otui":
                files[file_path] = self.generate_otui_variation(file_analysis, variation_name)
            else:
                # Copiar arquivo original para outros tipos
                files[file_path] = file_analysis
        
        return files
    
    def generate_lua_variation(self, file_analysis: Dict[str, Any], 
                             variation_name: str) -> Dict[str, Any]:
        """Gera varia√ß√£o de arquivo Lua"""
        content = file_analysis.get("content", "")
        structure = file_analysis.get("structure", {})
        
        # Aplicar varia√ß√µes
        modified_content = content
        
        # Varia√ß√£o 1: Adicionar novas fun√ß√µes
        modified_content = self.add_new_functions(modified_content, variation_name)
        
        # Varia√ß√£o 2: Modificar fun√ß√µes existentes
        modified_content = self.modify_existing_functions(modified_content, variation_name)
        
        # Varia√ß√£o 3: Adicionar novas vari√°veis
        modified_content = self.add_new_variables(modified_content, variation_name)
        
        # Varia√ß√£o 4: Adicionar coment√°rios de documenta√ß√£o
        modified_content = self.add_documentation_comments(modified_content, variation_name)
        
        # Criar nova an√°lise do arquivo modificado
        new_file_analysis = deepcopy(file_analysis)
        new_file_analysis["content"] = modified_content
        new_file_analysis["original_content"] = content
        new_file_analysis["modifications"] = {
            "new_functions": self.count_new_functions(content, modified_content),
            "modified_functions": self.count_modified_functions(content, modified_content),
            "new_variables": self.count_new_variables(content, modified_content)
        }
        
        return new_file_analysis
    
    def add_new_functions(self, content: str, variation_name: str) -> str:
        """Adiciona novas fun√ß√µes ao c√≥digo Lua"""
        new_functions = []
        
        # Fun√ß√µes de utilidade
        utility_functions = [
            f"""
-- Fun√ß√£o de utilidade para {variation_name}
function {variation_name}_getInfo()
    return {{
        name = "{variation_name}",
        version = "1.0",
        description = "Varia√ß√£o do m√≥dulo original"
    }}
end
""",
            f"""
-- Fun√ß√£o de configura√ß√£o para {variation_name}
function {variation_name}_configure()
    local config = {{
        enabled = true,
        autoSave = true,
        debugMode = false
    }}
    return config
end
""",
            f"""
-- Fun√ß√£o de inicializa√ß√£o para {variation_name}
function {variation_name}_init()
    print("Inicializando {variation_name}")
    local config = {variation_name}_configure()
    return config
end
"""
        ]
        
        # Adicionar fun√ß√µes aleat√≥rias
        num_functions = random.randint(1, 3)
        selected_functions = random.sample(utility_functions, num_functions)
        new_functions.extend(selected_functions)
        
        # Adicionar ao final do arquivo
        if new_functions:
            content += "\n" + "\n".join(new_functions)
        
        return content
    
    def modify_existing_functions(self, content: str, variation_name: str) -> str:
        """Modifica fun√ß√µes existentes"""
        # Encontrar fun√ß√µes existentes
        function_pattern = r'function\s+(\w+)\s*\([^)]*\)'
        functions = re.findall(function_pattern, content)
        
        if not functions:
            return content
        
        # Selecionar fun√ß√£o aleat√≥ria para modificar
        target_function = random.choice(functions)
        
        # Adicionar prefixo √† fun√ß√£o
        new_function_name = f"{variation_name}_{target_function}"
        
        # Substituir nome da fun√ß√£o
        content = re.sub(
            rf'function\s+{target_function}\s*\(',
            f'function {new_function_name}(',
            content
        )
        
        # Adicionar coment√°rio explicativo
        comment = f"\n-- Fun√ß√£o {target_function} modificada para {variation_name}"
        content = content.replace(f'function {new_function_name}(', comment + f'\nfunction {new_function_name}(')
        
        return content
    
    def add_new_variables(self, content: str, variation_name: str) -> str:
        """Adiciona novas vari√°veis ao c√≥digo Lua"""
        new_variables = []
        
        # Vari√°veis de configura√ß√£o
        config_variables = [
            f"local {variation_name}_enabled = true",
            f"local {variation_name}_debug = false",
            f"local {variation_name}_version = '1.0'",
            f"local {variation_name}_config = {{}}"
        ]
        
        # Adicionar vari√°veis aleat√≥rias
        num_variables = random.randint(2, 4)
        selected_variables = random.sample(config_variables, num_variables)
        new_variables.extend(selected_variables)
        
        # Adicionar no in√≠cio do arquivo (ap√≥s coment√°rios)
        if new_variables:
            # Encontrar posi√ß√£o ap√≥s coment√°rios iniciais
            lines = content.splitlines()
            insert_pos = 0
            
            for i, line in enumerate(lines):
                if line.strip() and not line.strip().startswith('--'):
                    insert_pos = i
                    break
            
            # Inserir vari√°veis
            lines.insert(insert_pos, "")
            lines.insert(insert_pos, f"-- Configura√ß√µes para {variation_name}")
            for var in new_variables:
                lines.insert(insert_pos + 1, var)
            
            content = "\n".join(lines)
        
        return content
    
    def add_documentation_comments(self, content: str, variation_name: str) -> str:
        """Adiciona coment√°rios de documenta√ß√£o"""
        # Adicionar cabe√ßalho de documenta√ß√£o
        header = f"""
-- ========================================
-- M√≥dulo: {variation_name}
-- Descri√ß√£o: Varia√ß√£o funcional do m√≥dulo original
-- Data de cria√ß√£o: {datetime.now().strftime('%Y-%m-%d')}
-- ========================================

"""
        
        content = header + content
        
        return content
    
    def generate_otmod_variation(self, file_analysis: Dict[str, Any], 
                               variation_name: str) -> Dict[str, Any]:
        """Gera varia√ß√£o de arquivo .otmod"""
        content = file_analysis.get("content", "")
        
        # Modificar informa√ß√µes do m√≥dulo
        modified_content = content
        
        # Alterar nome do m√≥dulo
        modified_content = re.sub(
            r'name:\s*\w+',
            f'name: {variation_name}',
            modified_content
        )
        
        # Alterar descri√ß√£o
        modified_content = re.sub(
            r'description:\s*[^\n]+',
            f'description: Varia√ß√£o funcional do m√≥dulo original',
            modified_content
        )
        
        # Adicionar informa√ß√µes extras
        extra_info = f"""
  author: Module Generator Agent
  website: Generated variation
  reloadable: true
  sandboxed: true
"""
        
        # Inserir ap√≥s a linha "Module"
        modified_content = modified_content.replace("Module", "Module" + extra_info)
        
        # Criar nova an√°lise
        new_file_analysis = deepcopy(file_analysis)
        new_file_analysis["content"] = modified_content
        new_file_analysis["original_content"] = content
        new_file_analysis["modifications"] = {
            "name_changed": True,
            "description_changed": True,
            "extra_info_added": True
        }
        
        return new_file_analysis
    
    def generate_otui_variation(self, file_analysis: Dict[str, Any], 
                              variation_name: str) -> Dict[str, Any]:
        """Gera varia√ß√£o de arquivo .otui"""
        content = file_analysis.get("content", "")
        
        # Modificar nomes de widgets
        modified_content = content
        
        # Substituir nomes de widgets com prefixo da varia√ß√£o
        widget_pattern = r'(\w+)\s+(\w+)'
        
        def replace_widget_name(match):
            widget_type = match.group(1)
            widget_name = match.group(2)
            new_name = f"{variation_name}_{widget_name}"
            return f"{widget_type} {new_name}"
        
        modified_content = re.sub(widget_pattern, replace_widget_name, modified_content)
        
        # Criar nova an√°lise
        new_file_analysis = deepcopy(file_analysis)
        new_file_analysis["content"] = modified_content
        new_file_analysis["original_content"] = content
        new_file_analysis["modifications"] = {
            "widget_names_changed": True
        }
        
        return new_file_analysis
    
    def calculate_modifications(self, base_analysis: Dict[str, Any], 
                              variation: Dict[str, Any]) -> Dict[str, Any]:
        """Calcula modifica√ß√µes feitas na varia√ß√£o"""
        modifications = {
            "total_files_modified": 0,
            "functions_added": 0,
            "functions_modified": 0,
            "variables_added": 0,
            "widgets_modified": 0,
            "structure_changes": 0
        }
        
        for file_path, file_analysis in variation["files"].items():
            file_mods = file_analysis.get("modifications", {})
            
            if file_mods:
                modifications["total_files_modified"] += 1
                modifications["functions_added"] += file_mods.get("new_functions", 0)
                modifications["functions_modified"] += file_mods.get("modified_functions", 0)
                modifications["variables_added"] += file_mods.get("new_variables", 0)
                
                if file_mods.get("widget_names_changed"):
                    modifications["widgets_modified"] += 1
        
        return modifications
    
    def calculate_compatibility_score(self, variation: Dict[str, Any]) -> float:
        """Calcula score de compatibilidade da varia√ß√£o"""
        score = 1.0  # Score base
        
        modifications = variation.get("modifications", {})
        
        # Penalizar muitas modifica√ß√µes
        total_mods = sum(modifications.values())
        if total_mods > 10:
            score -= 0.2
        elif total_mods > 5:
            score -= 0.1
        
        # Penalizar modifica√ß√µes estruturais
        if modifications.get("structure_changes", 0) > 0:
            score -= 0.3
        
        # Bonus para modifica√ß√µes balanceadas
        if 1 <= modifications.get("functions_added", 0) <= 3:
            score += 0.1
        
        # Garantir score m√≠nimo
        return max(0.0, min(1.0, score))
    
    def count_new_functions(self, original_content: str, modified_content: str) -> int:
        """Conta novas fun√ß√µes adicionadas"""
        original_functions = set(re.findall(r'function\s+(\w+)', original_content))
        modified_functions = set(re.findall(r'function\s+(\w+)', modified_content))
        
        return len(modified_functions - original_functions)
    
    def count_modified_functions(self, original_content: str, modified_content: str) -> int:
        """Conta fun√ß√µes modificadas"""
        original_functions = set(re.findall(r'function\s+(\w+)', original_content))
        modified_functions = set(re.findall(r'function\s+(\w+)', modified_content))
        
        return len(original_functions & modified_functions)
    
    def count_new_variables(self, original_content: str, modified_content: str) -> int:
        """Conta novas vari√°veis adicionadas"""
        original_vars = set(re.findall(r'local\s+(\w+)', original_content))
        modified_vars = set(re.findall(r'local\s+(\w+)', modified_content))
        
        return len(modified_vars - original_vars)
    
    def save_variations(self, base_module_name: str, variations: List[Dict[str, Any]]):
        """Salva varia√ß√µes geradas"""
        output_file = os.path.join(
            self.results_path, 
            "generated_modules", 
            f"{base_module_name}_variations.json"
        )
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(variations, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Varia√ß√µes salvas em: {output_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar varia√ß√µes: {e}")
    
    def create_physical_files(self, variation: Dict[str, Any]) -> str:
        """Cria arquivos f√≠sicos da varia√ß√£o"""
        variation_name = variation["variation_name"]
        variation_path = os.path.join(self.results_path, "generated_modules", variation_name)
        
        # Criar diret√≥rio da varia√ß√£o
        os.makedirs(variation_path, exist_ok=True)
        
        # Criar arquivos
        for file_path, file_analysis in variation["files"].items():
            file_content = file_analysis.get("content", "")
            full_file_path = os.path.join(variation_path, file_path)
            
            # Criar diret√≥rios necess√°rios
            os.makedirs(os.path.dirname(full_file_path), exist_ok=True)
            
            # Escrever arquivo
            try:
                with open(full_file_path, 'w', encoding='utf-8') as f:
                    f.write(file_content)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao criar arquivo {full_file_path}: {e}")
        
        return variation_path

def main():
    """Fun√ß√£o principal para teste do agente"""
    generator = ModuleGeneratorAgent()
    
    # Exemplo de an√°lise base (simulado)
    base_analysis = {
        "module_name": "client",
        "files": {
            "client.lua": {
                "content": "function init()\n  print('Hello')\nend",
                "file_type": ".lua",
                "structure": {"functions": [{"name": "init"}]}
            },
            "client.otmod": {
                "content": "Module\n  name: client\n  description: Test module",
                "file_type": ".otmod"
            }
        }
    }
    
    # Gerar varia√ß√µes
    variations = generator.generate_module_variations(base_analysis, 2)
    
    print(f"‚úÖ Geradas {len(variations)} varia√ß√µes")
    for i, variation in enumerate(variations):
        print(f"  Varia√ß√£o {i+1}: {variation['variation_name']} (Score: {variation['compatibility_score']:.2f})")

if __name__ == "__main__":
    main() 