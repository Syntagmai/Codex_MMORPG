{
  "workflow_id": "workflow_client_1753914092",
  "module_name": "client",
  "start_time": "2025-07-30T19:21:32.865017",
  "config": {
    "variation_count": 2,
    "test_all_variations": true,
    "save_physical_files": false,
    "enable_learning": true,
    "log_level": "INFO"
  },
  "phases": {
    "analysis": {
      "status": "completed",
      "results": {
        "module_name": "client",
        "analysis_date": "2025-07-30T19:21:32.872702",
        "module_path": "C:\\Users\\Dell\\Documents\\GitHub\\otclient_doc\\modules\\client",
        "files": {
          "client.lua": {
            "file_type": ".lua",
            "size": 2025,
            "lines": 82,
            "content": "local musicFilename = 'sounds/startup'\nlocal musicChannel = nil\nif g_sounds then\n    musicChannel = g_sounds.getChannel(SoundChannels.Music)\nend\n\nfunction setMusic(filename)\n    musicFilename = filename\n\n    if not g_game.isOnline() then\n        musicChannel:stop()\n        musicChannel:enqueue(musicFilename, 3)\n    end\nend\n\nfunction startup()\n    if musicChannel then\n        musicChannel:enqueue(musicFilename, 3)\n        connect(g_game, {\n            onGameStart = function()\n                musicChannel:stop(3)\n            end\n        })\n        connect(g_game, {\n            onGameEnd = function()\n                g_sounds.stopAll()\n                musicChannel:enqueue(musicFilename, 3)\n            end\n        })\n    end\n\n    -- Check for startup errors\n    local errtitle = nil\n    local errmsg = nil\n\n    if g_graphics.getRenderer():lower():match('gdi generic') then\n        errtitle = tr('Graphics card driver not detected')\n        errmsg = tr(\n            'No graphics card detected, everything will be drawn using the CPU,\\nthus the performance will be really bad.\\nPlease update your graphics driver to have a better performance.')\n    end\n\n    -- Show entergame\n    if errmsg or errtitle then\n        local msgbox = displayErrorBox(errtitle, errmsg)\n        msgbox.onOk = function()\n            EnterGame.firstShow()\n        end\n    else\n        EnterGame.firstShow()\n    end\n    if g_app.hasUpdater() and g_sounds then\n        g_sounds.setAudioEnabled(g_settings.getBoolean('enableAudio'))\n    end\nend\n\nfunction init()\n    if g_app.hasUpdater() then\n        connect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        connect(g_app, {\n            onRun = startup,\n        })\n    end\n\n    if musicChannel then\n        g_sounds.preload(musicFilename)\n    end\nend\n\nfunction terminate()\n    if g_app.hasUpdater() then\n        disconnect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        disconnect(g_app, {\n            onRun = startup,\n        })\n    end\nend\n",
            "structure": {
              "functions": [
                {
                  "name": "setMusic",
                  "line": 7,
                  "definition": "function setMusic(filename)"
                },
                {
                  "name": "startup",
                  "line": 16,
                  "definition": "function startup()"
                },
                {
                  "name": "init",
                  "line": 56,
                  "definition": "function init()"
                },
                {
                  "name": "terminate",
                  "line": 72,
                  "definition": "function terminate()"
                }
              ],
              "variables": [
                {
                  "name": "musicFilename",
                  "line": 1,
                  "definition": "local musicFilename = 'sounds/startup'"
                },
                {
                  "name": "musicChannel",
                  "line": 2,
                  "definition": "local musicChannel = nil"
                },
                {
                  "name": "errtitle",
                  "line": 33,
                  "definition": "local errtitle = nil"
                },
                {
                  "name": "errmsg",
                  "line": 34,
                  "definition": "local errmsg = nil"
                },
                {
                  "name": "msgbox",
                  "line": 44,
                  "definition": "local msgbox = displayErrorBox(errtitle, errmsg)"
                }
              ],
              "imports": [],
              "comments": [
                {
                  "line": 32,
                  "content": "-- Check for startup errors"
                },
                {
                  "line": 42,
                  "content": "-- Show entergame"
                }
              ],
              "complexity": 9
            },
            "patterns": {},
            "error": "'ModuleAnalyzerAgent' object has no attribute 'extract_lua_patterns'"
          },
          "client.otmod": {
            "file_type": ".otmod",
            "size": 493,
            "lines": 22,
            "content": "Module\n  name: client\n  description: Initialize the client and setups its main window\n  author: edubart\n  website: https://github.com/edubart/otclient\n  reloadable: false\n  sandboxed: true\n  scripts: [ client ]\n  @onLoad: init()\n  @onUnload: terminate()\n\n  load-later:\n    - client_styles\n    - client_locales\n    - client_topmenu\n    - client_bottommenu\n    - client_background\n    - client_options\n    - client_entergame\n    - client_terminal\n    - client_debug_info\n    - client_serverlist\n",
            "structure": {
              "module_info": {
                "name": "client",
                "description": "Initialize the client and setups its main window",
                "author": "edubart",
                "website": "https://github.com/edubart/otclient",
                "reloadable": "false",
                "sandboxed": "true"
              },
              "scripts": [],
              "load_later": [
                "client_styles",
                "client_locales",
                "client_topmenu",
                "client_bottommenu",
                "client_background",
                "client_options",
                "client_entergame",
                "client_terminal",
                "client_debug_info",
                "client_serverlist"
              ],
              "events": [
                {
                  "event": "onLoad",
                  "action": "init()"
                },
                {
                  "event": "onUnload",
                  "action": "terminate()"
                }
              ]
            },
            "patterns": {},
            "error": "'ModuleAnalyzerAgent' object has no attribute 'extract_otmod_patterns'"
          },
          "sounds\\startup.ogg": {
            "file_type": ".ogg",
            "size": 3154098,
            "lines": 0,
            "content": "",
            "structure": {},
            "patterns": {},
            "error": "'utf-8' codec can't decode byte 0xfb in position 22: invalid start byte"
          }
        },
        "structure": {
          "total_files": 3,
          "file_types": {
            ".lua": 1,
            ".otmod": 1,
            ".ogg": 1
          },
          "main_files": [
            "client.lua",
            "client.otmod"
          ],
          "dependencies": {},
          "complexity": 9
        },
        "patterns": {
          "lua_patterns": {
            "function_patterns": [
              "setMusic",
              "startup",
              "init",
              "terminate"
            ],
            "variable_patterns": [
              "musicFilename",
              "musicChannel",
              "errtitle",
              "errmsg",
              "msgbox"
            ],
            "import_patterns": [],
            "api_usage": [
              "isOnline",
              "getChannel",
              "stopAll",
              "setAudioEnabled",
              "preload",
              "getRenderer",
              "g_game",
              "g_game",
              "g_app",
              "g_app",
              "g_app",
              "g_app",
              "g_app",
              "g_app"
            ]
          },
          "otmod_patterns": {
            "module_properties": [
              [
                "name",
                "client"
              ],
              [
                "description",
                "Initialize the client and setups its main window"
              ],
              [
                "author",
                "edubart"
              ],
              [
                "website",
                "https://github.com/edubart/otclient"
              ],
              [
                "reloadable",
                "false"
              ],
              [
                "sandboxed",
                "true"
              ],
              [
                "scripts",
                "[ client ]"
              ],
              [
                "onLoad",
                "init()"
              ],
              [
                "onUnload",
                "terminate()"
              ],
              [
                "later",
                "- client_styles"
              ]
            ],
            "script_patterns": [
              "later",
              "client_styles",
              "client_locales",
              "client_topmenu",
              "client_bottommenu",
              "client_background",
              "client_options",
              "client_entergame",
              "client_terminal",
              "client_debug_info",
              "client_serverlist"
            ],
            "load_later_patterns": [],
            "event_patterns": [
              "onLoad",
              "onUnload"
            ]
          },
          "otui_patterns": {},
          "common_patterns": {
            "file_structure": {
              ".lua": 1,
              ".otmod": 1,
              ".ogg": 1
            },
            "naming_conventions": {
              "snake_case": 183,
              "camelCase": 194,
              "PascalCase": 11
            },
            "code_style": {}
          }
        },
        "dependencies": {
          "internal_deps": [],
          "external_deps": [],
          "api_deps": [
            "sounds",
            "game",
            "graphics",
            "app",
            "settings"
          ],
          "module_deps": [
            "client_bottommenu",
            "client_entergame",
            "client_terminal",
            "client_locales",
            "client_options",
            "client_topmenu",
            "client_styles",
            "client_background",
            "client_debug_info",
            "later",
            "client_serverlist"
          ]
        },
        "documentation": {
          "overview": "\n# Módulo client\n\n## Descrição\nEste módulo implementa funcionalidades relacionadas a client.\n\n## Arquivos\n- Total de arquivos: 3\n- Tipos de arquivo: .ogg, .lua, .otmod\n\n## Dependências\n- APIs OTClient: sounds, game, graphics, app, settings\n- Módulos: client_bottommenu, client_entergame, client_terminal, client_locales, client_options, client_topmenu, client_styles, client_background, client_debug_info, later, client_serverlist\n",
          "structure_summary": "\n## Estrutura\n\n### Arquivos Lua\n- Funções encontradas: 4\n- Variáveis locais: 5\n- Imports: 0\n\n### APIs Utilizadas\n- sounds\n- game\n- graphics\n- app\n- settings\n",
          "api_reference": "",
          "usage_examples": "",
          "patterns_documentation": ""
        },
        "metrics": {
          "coverage": 3,
          "complexity": 9,
          "documentation_quality": 1.9230769230769231,
          "pattern_diversity": 11
        },
        "duration": 0.06795477867126465,
        "status": "success"
      },
      "duration": 0.06795477867126465
    },
    "generation": {
      "status": "completed",
      "results": {
        "variations": [
          {
            "variation_id": 1,
            "base_module": "client",
            "variation_name": "client_improved_1",
            "generation_date": "2025-07-30T19:21:32.934242",
            "files": {
              "client.lua": {
                "file_type": ".lua",
                "size": 2025,
                "lines": 82,
                "content": "\n-- ========================================\n-- Módulo: client_improved_1\n-- Descrição: Variação funcional do módulo original\n-- Data de criação: 2025-07-30\n-- ========================================\n\n-- Configurações para client_improved_1\nlocal client_improved_1_debug = false\nlocal client_improved_1_enabled = true\nlocal client_improved_1_config = {}\nlocal client_improved_1_version = '1.0'\n\nlocal musicFilename = 'sounds/startup'\nlocal musicChannel = nil\nif g_sounds then\n    musicChannel = g_sounds.getChannel(SoundChannels.Music)\nend\n\nfunction setMusic(filename)\n    musicFilename = filename\n\n    if not g_game.isOnline() then\n        musicChannel:stop()\n        musicChannel:enqueue(musicFilename, 3)\n    end\nend\n\nfunction startup()\n    if musicChannel then\n        musicChannel:enqueue(musicFilename, 3)\n        connect(g_game, {\n            onGameStart = function()\n                musicChannel:stop(3)\n            end\n        })\n        connect(g_game, {\n            onGameEnd = function()\n                g_sounds.stopAll()\n                musicChannel:enqueue(musicFilename, 3)\n            end\n        })\n    end\n\n    -- Check for startup errors\n    local errtitle = nil\n    local errmsg = nil\n\n    if g_graphics.getRenderer():lower():match('gdi generic') then\n        errtitle = tr('Graphics card driver not detected')\n        errmsg = tr(\n            'No graphics card detected, everything will be drawn using the CPU,\\nthus the performance will be really bad.\\nPlease update your graphics driver to have a better performance.')\n    end\n\n    -- Show entergame\n    if errmsg or errtitle then\n        local msgbox = displayErrorBox(errtitle, errmsg)\n        msgbox.onOk = function()\n            EnterGame.firstShow()\n        end\n    else\n        EnterGame.firstShow()\n    end\n    if g_app.hasUpdater() and g_sounds then\n        g_sounds.setAudioEnabled(g_settings.getBoolean('enableAudio'))\n    end\nend\n\n\n-- Função init modificada para client_improved_1\nfunction client_improved_1_init()\n    if g_app.hasUpdater() then\n        connect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        connect(g_app, {\n            onRun = startup,\n        })\n    end\n\n    if musicChannel then\n        g_sounds.preload(musicFilename)\n    end\nend\n\nfunction terminate()\n    if g_app.hasUpdater() then\n        disconnect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        disconnect(g_app, {\n            onRun = startup,\n        })\n    end\nend\n\n\n-- Função de configuração para client_improved_1\nfunction client_improved_1_configure()\n    local config = {\n        enabled = true,\n        autoSave = true,\n        debugMode = false\n    }\n    return config\nend\n\n\n-- Função de utilidade para client_improved_1\nfunction client_improved_1_getInfo()\n    return {\n        name = \"client_improved_1\",\n        version = \"1.0\",\n        description = \"Variação do módulo original\"\n    }\nend\n\n\n-- Função de inicialização para client_improved_1\n\n-- Função init modificada para client_improved_1\nfunction client_improved_1_init()\n    print(\"Inicializando client_improved_1\")\n    local config = client_improved_1_configure()\n    return config\nend",
                "structure": {
                  "functions": [
                    {
                      "name": "setMusic",
                      "line": 7,
                      "definition": "function setMusic(filename)"
                    },
                    {
                      "name": "startup",
                      "line": 16,
                      "definition": "function startup()"
                    },
                    {
                      "name": "init",
                      "line": 56,
                      "definition": "function init()"
                    },
                    {
                      "name": "terminate",
                      "line": 72,
                      "definition": "function terminate()"
                    }
                  ],
                  "variables": [
                    {
                      "name": "musicFilename",
                      "line": 1,
                      "definition": "local musicFilename = 'sounds/startup'"
                    },
                    {
                      "name": "musicChannel",
                      "line": 2,
                      "definition": "local musicChannel = nil"
                    },
                    {
                      "name": "errtitle",
                      "line": 33,
                      "definition": "local errtitle = nil"
                    },
                    {
                      "name": "errmsg",
                      "line": 34,
                      "definition": "local errmsg = nil"
                    },
                    {
                      "name": "msgbox",
                      "line": 44,
                      "definition": "local msgbox = displayErrorBox(errtitle, errmsg)"
                    }
                  ],
                  "imports": [],
                  "comments": [
                    {
                      "line": 32,
                      "content": "-- Check for startup errors"
                    },
                    {
                      "line": 42,
                      "content": "-- Show entergame"
                    }
                  ],
                  "complexity": 9
                },
                "patterns": {},
                "error": "'ModuleAnalyzerAgent' object has no attribute 'extract_lua_patterns'",
                "original_content": "local musicFilename = 'sounds/startup'\nlocal musicChannel = nil\nif g_sounds then\n    musicChannel = g_sounds.getChannel(SoundChannels.Music)\nend\n\nfunction setMusic(filename)\n    musicFilename = filename\n\n    if not g_game.isOnline() then\n        musicChannel:stop()\n        musicChannel:enqueue(musicFilename, 3)\n    end\nend\n\nfunction startup()\n    if musicChannel then\n        musicChannel:enqueue(musicFilename, 3)\n        connect(g_game, {\n            onGameStart = function()\n                musicChannel:stop(3)\n            end\n        })\n        connect(g_game, {\n            onGameEnd = function()\n                g_sounds.stopAll()\n                musicChannel:enqueue(musicFilename, 3)\n            end\n        })\n    end\n\n    -- Check for startup errors\n    local errtitle = nil\n    local errmsg = nil\n\n    if g_graphics.getRenderer():lower():match('gdi generic') then\n        errtitle = tr('Graphics card driver not detected')\n        errmsg = tr(\n            'No graphics card detected, everything will be drawn using the CPU,\\nthus the performance will be really bad.\\nPlease update your graphics driver to have a better performance.')\n    end\n\n    -- Show entergame\n    if errmsg or errtitle then\n        local msgbox = displayErrorBox(errtitle, errmsg)\n        msgbox.onOk = function()\n            EnterGame.firstShow()\n        end\n    else\n        EnterGame.firstShow()\n    end\n    if g_app.hasUpdater() and g_sounds then\n        g_sounds.setAudioEnabled(g_settings.getBoolean('enableAudio'))\n    end\nend\n\nfunction init()\n    if g_app.hasUpdater() then\n        connect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        connect(g_app, {\n            onRun = startup,\n        })\n    end\n\n    if musicChannel then\n        g_sounds.preload(musicFilename)\n    end\nend\n\nfunction terminate()\n    if g_app.hasUpdater() then\n        disconnect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        disconnect(g_app, {\n            onRun = startup,\n        })\n    end\nend\n",
                "modifications": {
                  "new_functions": 3,
                  "modified_functions": 3,
                  "new_variables": 5
                }
              },
              "client.otmod": {
                "file_type": ".otmod",
                "size": 493,
                "lines": 22,
                "content": "Module\n  author: Module Generator Agent\n  website: Generated variation\n  reloadable: true\n  sandboxed: true\n\n  name: client_improved_1\n  description: Variação funcional do módulo original\n  author: edubart\n  website: https://github.com/edubart/otclient\n  reloadable: false\n  sandboxed: true\n  scripts: [ client ]\n  @onLoad: init()\n  @onUnload: terminate()\n\n  load-later:\n    - client_styles\n    - client_locales\n    - client_topmenu\n    - client_bottommenu\n    - client_background\n    - client_options\n    - client_entergame\n    - client_terminal\n    - client_debug_info\n    - client_serverlist\n",
                "structure": {
                  "module_info": {
                    "name": "client",
                    "description": "Initialize the client and setups its main window",
                    "author": "edubart",
                    "website": "https://github.com/edubart/otclient",
                    "reloadable": "false",
                    "sandboxed": "true"
                  },
                  "scripts": [],
                  "load_later": [
                    "client_styles",
                    "client_locales",
                    "client_topmenu",
                    "client_bottommenu",
                    "client_background",
                    "client_options",
                    "client_entergame",
                    "client_terminal",
                    "client_debug_info",
                    "client_serverlist"
                  ],
                  "events": [
                    {
                      "event": "onLoad",
                      "action": "init()"
                    },
                    {
                      "event": "onUnload",
                      "action": "terminate()"
                    }
                  ]
                },
                "patterns": {},
                "error": "'ModuleAnalyzerAgent' object has no attribute 'extract_otmod_patterns'",
                "original_content": "Module\n  name: client\n  description: Initialize the client and setups its main window\n  author: edubart\n  website: https://github.com/edubart/otclient\n  reloadable: false\n  sandboxed: true\n  scripts: [ client ]\n  @onLoad: init()\n  @onUnload: terminate()\n\n  load-later:\n    - client_styles\n    - client_locales\n    - client_topmenu\n    - client_bottommenu\n    - client_background\n    - client_options\n    - client_entergame\n    - client_terminal\n    - client_debug_info\n    - client_serverlist\n",
                "modifications": {
                  "name_changed": true,
                  "description_changed": true,
                  "extra_info_added": true
                }
              },
              "sounds\\startup.ogg": {
                "file_type": ".ogg",
                "size": 3154098,
                "lines": 0,
                "content": "",
                "structure": {},
                "patterns": {},
                "error": "'utf-8' codec can't decode byte 0xfb in position 22: invalid start byte"
              }
            },
            "modifications": {
              "total_files_modified": 2,
              "functions_added": 3,
              "functions_modified": 3,
              "variables_added": 5,
              "widgets_modified": 0,
              "structure_changes": 0
            },
            "compatibility_score": 0.9
          },
          {
            "variation_id": 2,
            "base_module": "client",
            "variation_name": "client_basic_2",
            "generation_date": "2025-07-30T19:21:32.937381",
            "files": {
              "client.lua": {
                "file_type": ".lua",
                "size": 2025,
                "lines": 82,
                "content": "\n-- ========================================\n-- Módulo: client_basic_2\n-- Descrição: Variação funcional do módulo original\n-- Data de criação: 2025-07-30\n-- ========================================\n\n-- Configurações para client_basic_2\nlocal client_basic_2_config = {}\nlocal client_basic_2_debug = false\nlocal client_basic_2_version = '1.0'\nlocal client_basic_2_enabled = true\n\nlocal musicFilename = 'sounds/startup'\nlocal musicChannel = nil\nif g_sounds then\n    musicChannel = g_sounds.getChannel(SoundChannels.Music)\nend\n\nfunction setMusic(filename)\n    musicFilename = filename\n\n    if not g_game.isOnline() then\n        musicChannel:stop()\n        musicChannel:enqueue(musicFilename, 3)\n    end\nend\n\nfunction startup()\n    if musicChannel then\n        musicChannel:enqueue(musicFilename, 3)\n        connect(g_game, {\n            onGameStart = function()\n                musicChannel:stop(3)\n            end\n        })\n        connect(g_game, {\n            onGameEnd = function()\n                g_sounds.stopAll()\n                musicChannel:enqueue(musicFilename, 3)\n            end\n        })\n    end\n\n    -- Check for startup errors\n    local errtitle = nil\n    local errmsg = nil\n\n    if g_graphics.getRenderer():lower():match('gdi generic') then\n        errtitle = tr('Graphics card driver not detected')\n        errmsg = tr(\n            'No graphics card detected, everything will be drawn using the CPU,\\nthus the performance will be really bad.\\nPlease update your graphics driver to have a better performance.')\n    end\n\n    -- Show entergame\n    if errmsg or errtitle then\n        local msgbox = displayErrorBox(errtitle, errmsg)\n        msgbox.onOk = function()\n            EnterGame.firstShow()\n        end\n    else\n        EnterGame.firstShow()\n    end\n    if g_app.hasUpdater() and g_sounds then\n        g_sounds.setAudioEnabled(g_settings.getBoolean('enableAudio'))\n    end\nend\n\n\n-- Função init modificada para client_basic_2\nfunction client_basic_2_init()\n    if g_app.hasUpdater() then\n        connect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        connect(g_app, {\n            onRun = startup,\n        })\n    end\n\n    if musicChannel then\n        g_sounds.preload(musicFilename)\n    end\nend\n\nfunction terminate()\n    if g_app.hasUpdater() then\n        disconnect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        disconnect(g_app, {\n            onRun = startup,\n        })\n    end\nend\n\n\n-- Função de utilidade para client_basic_2\nfunction client_basic_2_getInfo()\n    return {\n        name = \"client_basic_2\",\n        version = \"1.0\",\n        description = \"Variação do módulo original\"\n    }\nend\n\n\n-- Função de configuração para client_basic_2\nfunction client_basic_2_configure()\n    local config = {\n        enabled = true,\n        autoSave = true,\n        debugMode = false\n    }\n    return config\nend",
                "structure": {
                  "functions": [
                    {
                      "name": "setMusic",
                      "line": 7,
                      "definition": "function setMusic(filename)"
                    },
                    {
                      "name": "startup",
                      "line": 16,
                      "definition": "function startup()"
                    },
                    {
                      "name": "init",
                      "line": 56,
                      "definition": "function init()"
                    },
                    {
                      "name": "terminate",
                      "line": 72,
                      "definition": "function terminate()"
                    }
                  ],
                  "variables": [
                    {
                      "name": "musicFilename",
                      "line": 1,
                      "definition": "local musicFilename = 'sounds/startup'"
                    },
                    {
                      "name": "musicChannel",
                      "line": 2,
                      "definition": "local musicChannel = nil"
                    },
                    {
                      "name": "errtitle",
                      "line": 33,
                      "definition": "local errtitle = nil"
                    },
                    {
                      "name": "errmsg",
                      "line": 34,
                      "definition": "local errmsg = nil"
                    },
                    {
                      "name": "msgbox",
                      "line": 44,
                      "definition": "local msgbox = displayErrorBox(errtitle, errmsg)"
                    }
                  ],
                  "imports": [],
                  "comments": [
                    {
                      "line": 32,
                      "content": "-- Check for startup errors"
                    },
                    {
                      "line": 42,
                      "content": "-- Show entergame"
                    }
                  ],
                  "complexity": 9
                },
                "patterns": {},
                "error": "'ModuleAnalyzerAgent' object has no attribute 'extract_lua_patterns'",
                "original_content": "local musicFilename = 'sounds/startup'\nlocal musicChannel = nil\nif g_sounds then\n    musicChannel = g_sounds.getChannel(SoundChannels.Music)\nend\n\nfunction setMusic(filename)\n    musicFilename = filename\n\n    if not g_game.isOnline() then\n        musicChannel:stop()\n        musicChannel:enqueue(musicFilename, 3)\n    end\nend\n\nfunction startup()\n    if musicChannel then\n        musicChannel:enqueue(musicFilename, 3)\n        connect(g_game, {\n            onGameStart = function()\n                musicChannel:stop(3)\n            end\n        })\n        connect(g_game, {\n            onGameEnd = function()\n                g_sounds.stopAll()\n                musicChannel:enqueue(musicFilename, 3)\n            end\n        })\n    end\n\n    -- Check for startup errors\n    local errtitle = nil\n    local errmsg = nil\n\n    if g_graphics.getRenderer():lower():match('gdi generic') then\n        errtitle = tr('Graphics card driver not detected')\n        errmsg = tr(\n            'No graphics card detected, everything will be drawn using the CPU,\\nthus the performance will be really bad.\\nPlease update your graphics driver to have a better performance.')\n    end\n\n    -- Show entergame\n    if errmsg or errtitle then\n        local msgbox = displayErrorBox(errtitle, errmsg)\n        msgbox.onOk = function()\n            EnterGame.firstShow()\n        end\n    else\n        EnterGame.firstShow()\n    end\n    if g_app.hasUpdater() and g_sounds then\n        g_sounds.setAudioEnabled(g_settings.getBoolean('enableAudio'))\n    end\nend\n\nfunction init()\n    if g_app.hasUpdater() then\n        connect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        connect(g_app, {\n            onRun = startup,\n        })\n    end\n\n    if musicChannel then\n        g_sounds.preload(musicFilename)\n    end\nend\n\nfunction terminate()\n    if g_app.hasUpdater() then\n        disconnect(g_app, {\n            onUpdateFinished = startup,\n        })\n    else\n        disconnect(g_app, {\n            onRun = startup,\n        })\n    end\nend\n",
                "modifications": {
                  "new_functions": 3,
                  "modified_functions": 3,
                  "new_variables": 5
                }
              },
              "client.otmod": {
                "file_type": ".otmod",
                "size": 493,
                "lines": 22,
                "content": "Module\n  author: Module Generator Agent\n  website: Generated variation\n  reloadable: true\n  sandboxed: true\n\n  name: client_basic_2\n  description: Variação funcional do módulo original\n  author: edubart\n  website: https://github.com/edubart/otclient\n  reloadable: false\n  sandboxed: true\n  scripts: [ client ]\n  @onLoad: init()\n  @onUnload: terminate()\n\n  load-later:\n    - client_styles\n    - client_locales\n    - client_topmenu\n    - client_bottommenu\n    - client_background\n    - client_options\n    - client_entergame\n    - client_terminal\n    - client_debug_info\n    - client_serverlist\n",
                "structure": {
                  "module_info": {
                    "name": "client",
                    "description": "Initialize the client and setups its main window",
                    "author": "edubart",
                    "website": "https://github.com/edubart/otclient",
                    "reloadable": "false",
                    "sandboxed": "true"
                  },
                  "scripts": [],
                  "load_later": [
                    "client_styles",
                    "client_locales",
                    "client_topmenu",
                    "client_bottommenu",
                    "client_background",
                    "client_options",
                    "client_entergame",
                    "client_terminal",
                    "client_debug_info",
                    "client_serverlist"
                  ],
                  "events": [
                    {
                      "event": "onLoad",
                      "action": "init()"
                    },
                    {
                      "event": "onUnload",
                      "action": "terminate()"
                    }
                  ]
                },
                "patterns": {},
                "error": "'ModuleAnalyzerAgent' object has no attribute 'extract_otmod_patterns'",
                "original_content": "Module\n  name: client\n  description: Initialize the client and setups its main window\n  author: edubart\n  website: https://github.com/edubart/otclient\n  reloadable: false\n  sandboxed: true\n  scripts: [ client ]\n  @onLoad: init()\n  @onUnload: terminate()\n\n  load-later:\n    - client_styles\n    - client_locales\n    - client_topmenu\n    - client_bottommenu\n    - client_background\n    - client_options\n    - client_entergame\n    - client_terminal\n    - client_debug_info\n    - client_serverlist\n",
                "modifications": {
                  "name_changed": true,
                  "description_changed": true,
                  "extra_info_added": true
                }
              },
              "sounds\\startup.ogg": {
                "file_type": ".ogg",
                "size": 3154098,
                "lines": 0,
                "content": "",
                "structure": {},
                "patterns": {},
                "error": "'utf-8' codec can't decode byte 0xfb in position 22: invalid start byte"
              }
            },
            "modifications": {
              "total_files_modified": 2,
              "functions_added": 3,
              "functions_modified": 3,
              "variables_added": 5,
              "widgets_modified": 0,
              "structure_changes": 0
            },
            "compatibility_score": 0.9
          }
        ],
        "total_variations": 2,
        "successful_variations": 2,
        "average_compatibility_score": 0.9,
        "status": "success",
        "duration": 0.007494688034057617
      },
      "duration": 0.007494688034057617
    },
    "testing": {
      "status": "completed",
      "results": {
        "test_date": "2025-07-30T19:21:32.942186",
        "original_module": "client",
        "total_variations": 2,
        "test_criteria": {
          "syntax_check": true,
          "structure_validation": true,
          "dependency_check": true,
          "compatibility_test": true,
          "performance_test": true,
          "security_test": true
        },
        "variation_results": [
          {
            "variation_name": "client_improved_1",
            "variation_id": 1,
            "test_results": {
              "syntax": {
                "passed": false,
                "errors": [
                  "Funções e 'end' desbalanceados: 7 funções, 19 ends"
                ],
                "files_tested": 1,
                "files_with_errors": 1
              },
              "structure": {
                "passed": true,
                "warnings": [],
                "structure_changes": {
                  "client.lua": {
                    "functions_added": [
                      "client_improved_1_getInfo",
                      "client_improved_1_init",
                      "client_improved_1_configure"
                    ],
                    "functions_removed": [
                      "init"
                    ],
                    "functions_modified": [
                      "terminate",
                      "setMusic",
                      "startup"
                    ],
                    "variables_added": [
                      "client_improved_1_enabled",
                      "client_improved_1_debug",
                      "client_improved_1_version",
                      "config",
                      "client_improved_1_config"
                    ],
                    "variables_removed": []
                  }
                },
                "missing_elements": [],
                "new_elements": []
              },
              "dependencies": {
                "passed": true,
                "errors": [],
                "warnings": [],
                "missing_deps": [],
                "unused_deps": []
              },
              "compatibility": {
                "passed": true,
                "score": 0.9,
                "issues": [],
                "compatibility_notes": []
              },
              "performance": {
                "passed": true,
                "score": 0.9,
                "issues": [],
                "metrics": {
                  "total_lines": 128,
                  "total_functions": 7,
                  "total_variables": 11,
                  "complexity_ratio": 0.0546875
                }
              },
              "security": {
                "passed": false,
                "score": 0.8,
                "issues": [],
                "vulnerabilities": [
                  "Uso de load pode ser inseguro"
                ]
              }
            },
            "errors": [
              "Funções e 'end' desbalanceados: 7 funções, 19 ends"
            ],
            "warnings": [],
            "quality_score": 1.0,
            "compatibility_score": 0.9,
            "performance_score": 0.9
          },
          {
            "variation_name": "client_basic_2",
            "variation_id": 2,
            "test_results": {
              "syntax": {
                "passed": false,
                "errors": [
                  "Funções e 'end' desbalanceados: 6 funções, 18 ends"
                ],
                "files_tested": 1,
                "files_with_errors": 1
              },
              "structure": {
                "passed": true,
                "warnings": [],
                "structure_changes": {
                  "client.lua": {
                    "functions_added": [
                      "client_basic_2_getInfo",
                      "client_basic_2_init",
                      "client_basic_2_configure"
                    ],
                    "functions_removed": [
                      "init"
                    ],
                    "functions_modified": [
                      "terminate",
                      "setMusic",
                      "startup"
                    ],
                    "variables_added": [
                      "client_basic_2_config",
                      "config",
                      "client_basic_2_enabled",
                      "client_basic_2_debug",
                      "client_basic_2_version"
                    ],
                    "variables_removed": []
                  }
                },
                "missing_elements": [],
                "new_elements": []
              },
              "dependencies": {
                "passed": true,
                "errors": [],
                "warnings": [],
                "missing_deps": [],
                "unused_deps": []
              },
              "compatibility": {
                "passed": true,
                "score": 0.9,
                "issues": [],
                "compatibility_notes": []
              },
              "performance": {
                "passed": true,
                "score": 0.9,
                "issues": [],
                "metrics": {
                  "total_lines": 118,
                  "total_functions": 6,
                  "total_variables": 10,
                  "complexity_ratio": 0.05084745762711865
                }
              },
              "security": {
                "passed": false,
                "score": 0.8,
                "issues": [],
                "vulnerabilities": [
                  "Uso de load pode ser inseguro"
                ]
              }
            },
            "errors": [
              "Funções e 'end' desbalanceados: 6 funções, 18 ends"
            ],
            "warnings": [],
            "quality_score": 1.0,
            "compatibility_score": 0.9,
            "performance_score": 0.9
          }
        ],
        "summary": {
          "total_variations": 2,
          "passed_variations": 2,
          "failed_variations": 0,
          "average_quality_score": 1.0,
          "average_compatibility_score": 0.9,
          "average_performance_score": 0.9,
          "total_errors": 2,
          "total_warnings": 0,
          "best_variation": "client_improved_1",
          "worst_variation": "client_improved_1"
        },
        "recommendations": [
          "Encontrados 2 erros. Corrigir problemas de sintaxe."
        ],
        "duration": 0.009924173355102539,
        "status": "success"
      },
      "duration": 0.009924173355102539
    },
    "learning": {
      "status": "completed",
      "results": {
        "processing_date": "2025-07-30T19:21:32.952887",
        "original_module": "client",
        "insights": {
          "analysis": {
            "module_complexity": {
              "overall_complexity": 9,
              "coverage": 3,
              "documentation_quality": 1.9230769230769231,
              "pattern_diversity": 11
            },
            "code_patterns": {
              "lua_patterns": {
                "function_patterns": [
                  "setMusic",
                  "startup",
                  "init",
                  "terminate"
                ],
                "variable_patterns": [
                  "musicFilename",
                  "musicChannel",
                  "errtitle",
                  "errmsg",
                  "msgbox"
                ],
                "import_patterns": [],
                "api_usage": [
                  "isOnline",
                  "getChannel",
                  "stopAll",
                  "setAudioEnabled",
                  "preload",
                  "getRenderer",
                  "g_game",
                  "g_game",
                  "g_app",
                  "g_app",
                  "g_app",
                  "g_app",
                  "g_app",
                  "g_app"
                ]
              },
              "otmod_patterns": {
                "module_properties": [
                  [
                    "name",
                    "client"
                  ],
                  [
                    "description",
                    "Initialize the client and setups its main window"
                  ],
                  [
                    "author",
                    "edubart"
                  ],
                  [
                    "website",
                    "https://github.com/edubart/otclient"
                  ],
                  [
                    "reloadable",
                    "false"
                  ],
                  [
                    "sandboxed",
                    "true"
                  ],
                  [
                    "scripts",
                    "[ client ]"
                  ],
                  [
                    "onLoad",
                    "init()"
                  ],
                  [
                    "onUnload",
                    "terminate()"
                  ],
                  [
                    "later",
                    "- client_styles"
                  ]
                ],
                "script_patterns": [
                  "later",
                  "client_styles",
                  "client_locales",
                  "client_topmenu",
                  "client_bottommenu",
                  "client_background",
                  "client_options",
                  "client_entergame",
                  "client_terminal",
                  "client_debug_info",
                  "client_serverlist"
                ],
                "load_later_patterns": [],
                "event_patterns": [
                  "onLoad",
                  "onUnload"
                ]
              },
              "otui_patterns": {},
              "common_patterns": {
                "file_structure": {
                  ".lua": 1,
                  ".otmod": 1,
                  ".ogg": 1
                },
                "naming_conventions": {
                  "snake_case": 183,
                  "camelCase": 194,
                  "PascalCase": 11
                },
                "code_style": {}
              }
            },
            "dependencies": {
              "api_dependencies": [
                "sounds",
                "game",
                "graphics",
                "app",
                "settings"
              ],
              "module_dependencies": [
                "client_bottommenu",
                "client_entergame",
                "client_terminal",
                "client_locales",
                "client_options",
                "client_topmenu",
                "client_styles",
                "client_background",
                "client_debug_info",
                "later",
                "client_serverlist"
              ],
              "internal_dependencies": []
            },
            "structure_insights": {
              "file_count": 3,
              "file_types": {
                ".lua": 1,
                ".otmod": 1,
                ".ogg": 1
              },
              "structure_complexity": {
                "total_files": 3,
                "file_types": {
                  ".lua": 1,
                  ".otmod": 1,
                  ".ogg": 1
                },
                "main_files": [
                  "client.lua",
                  "client.otmod"
                ],
                "dependencies": {},
                "complexity": 9
              }
            },
            "quality_metrics": {}
          },
          "generation": {
            "generation_success": {
              "total_variations": 2,
              "successful_variations": 2,
              "success_rate": 1.0
            },
            "variation_patterns": {
              "improved": 1,
              "basic": 1
            },
            "modification_insights": {
              "total_files_modified": 4,
              "functions_added": 6,
              "functions_modified": 6,
              "variables_added": 10,
              "widgets_modified": 0,
              "structure_changes": 0
            },
            "compatibility_insights": {
              "average_score": 0.9,
              "min_score": 0.9,
              "max_score": 0.9,
              "score_distribution": {
                "excellent": 2,
                "good": 0,
                "fair": 0,
                "poor": 0
              }
            }
          },
          "testing": {
            "test_success": {
              "total_variations": 2,
              "passed_variations": 2,
              "failed_variations": 0,
              "pass_rate": 1.0
            },
            "error_patterns": {
              "Funções e 'end' desbalanceados: 7 funções, 19 ends": 1,
              "Funções e 'end' desbalanceados: 6 funções, 18 ends": 1
            },
            "quality_insights": {
              "average_quality_score": 1.0,
              "average_compatibility_score": 0.9,
              "average_performance_score": 0.9,
              "total_errors": 2,
              "total_warnings": 0
            },
            "performance_insights": {},
            "security_insights": {}
          }
        },
        "patterns": {
          "success_patterns": {
            "modification_characteristics": {
              "total_files_modified": 4,
              "functions_added": 6,
              "functions_modified": 6,
              "variables_added": 10,
              "widgets_modified": 0,
              "structure_changes": 0
            },
            "naming_patterns": {
              "_improved": 1,
              "_basic": 1
            },
            "structure_characteristics": {}
          },
          "failure_patterns": {},
          "code_patterns": {
            "function_patterns": {
              "total_functions": 4,
              "common_function_names": [
                [
                  "setMusic",
                  1
                ],
                [
                  "startup",
                  1
                ],
                [
                  "init",
                  1
                ],
                [
                  "terminate",
                  1
                ]
              ]
            },
            "variable_patterns": {
              "total_variables": 5,
              "common_variable_names": [
                [
                  "musicFilename",
                  1
                ],
                [
                  "musicChannel",
                  1
                ],
                [
                  "errtitle",
                  1
                ],
                [
                  "errmsg",
                  1
                ],
                [
                  "msgbox",
                  1
                ]
              ]
            },
            "api_usage_patterns": {
              "total_api_calls": 14,
              "common_apis": [
                [
                  "g_app",
                  6
                ],
                [
                  "g_game",
                  2
                ],
                [
                  "isOnline",
                  1
                ],
                [
                  "getChannel",
                  1
                ],
                [
                  "stopAll",
                  1
                ]
              ]
            },
            "file_structure_patterns": {}
          },
          "structural_patterns": {
            "file_organization": {
              ".lua": 1,
              ".otmod": 1,
              ".ogg": 1
            },
            "module_structure": {
              "total_files": 3,
              "has_lua_files": true,
              "has_otmod_files": true,
              "has_otui_files": false
            },
            "dependency_patterns": {}
          }
        },
        "rules": {
          "generation_rules": [
            "Manter padrões de geração atuais - alta taxa de sucesso"
          ],
          "testing_rules": [],
          "quality_rules": [],
          "best_practices": [
            "Seguir padrões identificados em variações bem-sucedidas"
          ]
        },
        "recommendations": [
          "Workflow funcionando bem - manter configurações atuais"
        ],
        "knowledge_updates": {
          "patterns_updated": {
            "success_patterns": 3,
            "code_patterns": 4,
            "structural_patterns": 3
          },
          "rules_updated": {
            "generation_rules": 1,
            "best_practices": 1
          },
          "insights_updated": {
            "analysis": 5,
            "generation": 4,
            "testing": 5
          },
          "best_practices_updated": {}
        },
        "duration": 0.034276485443115234,
        "status": "success"
      },
      "duration": 0.034276485443115234
    }
  },
  "summary": {
    "total_duration": 0.11965012550354004,
    "phases_completed": 4,
    "total_phases": 4,
    "overall_status": "success",
    "key_metrics": {
      "variations_generated": 2,
      "success_rate": 1.0,
      "test_pass_rate": 1.0,
      "average_quality_score": 1.0
    }
  },
  "errors": [],
  "warnings": [],
  "end_time": "2025-07-30T19:21:32.993003"
}