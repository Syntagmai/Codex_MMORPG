#!/usr/bin/env python3
"""
Script para criar guia de conceitos b√°sicos e troubleshooting comum.
Adiciona explica√ß√µes detalhadas de conceitos fundamentais.
"""

import os
from pathlib import Path
from datetime import datetime

def create_basic_concepts_guide():
    """Cria guia de conceitos b√°sicos com explica√ß√µes detalhadas."""
    
    guide_file = Path("wiki/Conceitos_Basicos.md")
    
    print("üìö Criando guia de conceitos b√°sicos...")
    
    content = """---
title: Conceitos B√°sicos
tags: [conceitos, basico, fundamentos, explicacao, tutorial]
type: guide
status: active
priority: alta
created: 2025-08-04
updated: 2025-08-04
---

# üß† **CONCEITOS B√ÅSICOS - OTClient**

> [!info] **FUNDAMENTOS ESSENCIAIS**
> Este guia explica os conceitos b√°sicos necess√°rios para entender e trabalhar com OTClient.

---

## üìã **√çNDICE DETALHADO**

### **üéØ Navega√ß√£o R√°pida**
1. [O que √© Programa√ß√£o?](#-o-que-√©-programa√ß√£o)
2. [Linguagens de Programa√ß√£o](#-linguagens-de-programa√ß√£o)
3. [Conceitos de Interface](#-conceitos-de-interface)
4. [Sistema de Arquivos](#-sistema-de-arquivos)
5. [Debug e Erros](#-debug-e-erros)

---

## üíª **O QUE √â PROGRAMA√á√ÉO?**

### **üìñ Defini√ß√£o B√°sica**
Programa√ß√£o √© o processo de criar instru√ß√µes para um computador executar tarefas espec√≠ficas. √â como escrever uma receita de bolo - voc√™ diz ao computador exatamente o que fazer, passo a passo.

### **üîß Analogias Simples**

#### **Receita de Bolo**
- **Ingredientes** = Vari√°veis (dados)
- **Passos** = Instru√ß√µes (c√≥digo)
- **Resultado** = Programa funcionando

#### **Lego**
- **Pe√ßas** = Fun√ß√µes e componentes
- **Montagem** = Programa√ß√£o
- **Modelo final** = Aplica√ß√£o completa

### **üéØ Por que Programar?**
- **Automatizar tarefas** repetitivas
- **Resolver problemas** complexos
- **Criar ferramentas** √∫teis
- **Expressar criatividade** atrav√©s do c√≥digo

---

## üî§ **LINGUAGENS DE PROGRAMA√á√ÉO**

### **üìù O que s√£o Linguagens?**

#### **Defini√ß√£o**
Linguagens de programa√ß√£o s√£o formas de comunica√ß√£o entre humanos e computadores. Cada linguagem tem suas regras e sintaxe espec√≠ficas.

#### **Tipos de Linguagens**

##### **Linguagens Interpretadas (Lua)**
- **Como funciona**: C√≥digo √© executado linha por linha
- **Vantagens**: F√°cil de aprender, desenvolvimento r√°pido
- **Desvantagens**: Mais lento que linguagens compiladas
- **Exemplo**: Lua, Python, JavaScript

##### **Linguagens Compiladas (C++)**
- **Como funciona**: C√≥digo √© convertido em linguagem de m√°quina
- **Vantagens**: Muito r√°pido, controle total
- **Desvantagens**: Mais complexo, desenvolvimento mais lento
- **Exemplo**: C++, C, Rust

### **üîß Lua - Linguagem Principal do OTClient**

#### **Caracter√≠sticas**
- **Sintaxe simples** e intuitiva
- **Tipagem din√¢mica** (n√£o precisa declarar tipos)
- **Garbage collection** autom√°tico
- **Interpretada** (execu√ß√£o direta)

#### **Exemplo B√°sico**
```lua
-- Vari√°vel simples
local nome = "Jo√£o"
local idade = 25

-- Fun√ß√£o b√°sica
function cumprimentar(pessoa)
    print("Ol√°, " .. pessoa .. "!")
end

-- Usar a fun√ß√£o
cumprimentar(nome)
```

#### **Conceitos Importantes**

##### **Vari√°veis**
- **O que s√£o**: Espa√ßos para armazenar dados
- **Tipos**: Texto (string), n√∫meros, booleanos (true/false)
- **Exemplo**: `local contador = 0`

##### **Fun√ß√µes**
- **O que s√£o**: Blocos de c√≥digo reutiliz√°veis
- **Fun√ß√£o**: Encapsular l√≥gica, evitar repeti√ß√£o
- **Exemplo**: `function somar(a, b) return a + b end`

##### **Tabelas (Arrays)**
- **O que s√£o**: Estruturas para organizar dados
- **Uso**: Listas, dicion√°rios, objetos
- **Exemplo**: `local frutas = {"ma√ß√£", "banana", "laranja"}`

---

## üñ•Ô∏è **CONCEITOS DE INTERFACE**

### **üé® O que √© Interface do Usu√°rio?**

#### **Defini√ß√£o**
Interface do usu√°rio (UI) √© tudo que o usu√°rio v√™ e com o qual interage no programa. √â como a "cara" do programa.

#### **Elementos B√°sicos**

##### **Janela (Window)**
- **O que √©**: √Årea principal onde o programa aparece
- **Fun√ß√£o**: Conter outros elementos
- **Exemplo**: Janela do navegador, janela do Word

##### **Bot√£o (Button)**
- **O que √©**: Elemento clic√°vel para a√ß√µes
- **Fun√ß√£o**: Executar comandos quando clicado
- **Exemplo**: Bot√£o "Salvar", "Cancelar", "OK"

##### **Campo de Texto (TextEdit)**
- **O que √©**: √Årea para digitar texto
- **Fun√ß√£o**: Coletar informa√ß√µes do usu√°rio
- **Exemplo**: Campo de login, caixa de pesquisa

##### **Lista (List)**
- **O que √©**: Lista de itens para sele√ß√£o
- **Fun√ß√£o**: Mostrar op√ß√µes dispon√≠veis
- **Exemplo**: Lista de arquivos, menu dropdown

### **üéØ Eventos e Intera√ß√£o**

#### **O que s√£o Eventos?**
Eventos s√£o a√ß√µes que acontecem quando o usu√°rio interage com a interface.

#### **Eventos Comuns**
- **Clique**: Usu√°rio clica em algo
- **Digita√ß√£o**: Usu√°rio digita texto
- **Movimento do mouse**: Usu√°rio move o cursor
- **Carregamento**: Programa termina de carregar

#### **Como Responder a Eventos**
```lua
-- Quando bot√£o √© clicado
botao.onClick = function()
    print("Bot√£o foi clicado!")
end

-- Quando texto muda
campo.onTextChange = function()
    print("Texto foi alterado!")
end
```

---

## üìÅ **SISTEMA DE ARQUIVOS**

### **üóÇÔ∏è O que √© Sistema de Arquivos?**

#### **Defini√ß√£o**
Sistema de arquivos √© a forma como o computador organiza e armazena arquivos. √â como uma biblioteca com prateleiras e livros.

#### **Conceitos B√°sicos**

##### **Arquivo**
- **O que √©**: Unidade b√°sica de informa√ß√£o
- **Tipos**: Texto, imagem, som, programa
- **Exemplo**: `documento.txt`, `foto.jpg`, `musica.mp3`

##### **Pasta (Diret√≥rio)**
- **O que √©**: Container para organizar arquivos
- **Fun√ß√£o**: Agrupar arquivos relacionados
- **Exemplo**: `Documentos/`, `Imagens/`, `Downloads/`

##### **Caminho (Path)**
- **O que √©**: Endere√ßo para localizar um arquivo
- **Formato**: `pasta/subpasta/arquivo.extensao`
- **Exemplo**: `Documents/Trabalho/relatorio.pdf`

### **üîß No Contexto do OTClient**

#### **Estrutura de Pastas**
```
otclient/
‚îú‚îÄ‚îÄ modules/          # M√≥dulos do sistema
‚îú‚îÄ‚îÄ data/            # Dados e recursos
‚îú‚îÄ‚îÄ src/             # C√≥digo fonte
‚îî‚îÄ‚îÄ docs/            # Documenta√ß√£o
```

#### **Acessando Arquivos**
```lua
-- Verificar se arquivo existe
if g_resources.fileExists("config.txt") then
    print("Arquivo encontrado!")
end

-- Ler conte√∫do do arquivo
local conteudo = g_resources.readFileContents("dados.txt")
```

---

## üêõ **DEBUG E ERROS**

### **‚ùå O que s√£o Erros?**

#### **Defini√ß√£o**
Erros s√£o problemas que impedem o programa de funcionar corretamente. S√£o como "bugs" que precisam ser corrigidos.

#### **Tipos de Erros**

##### **Erro de Sintaxe**
- **O que √©**: Erro na escrita do c√≥digo
- **Causa**: Par√™nteses n√£o fechados, ponto e v√≠rgula faltando
- **Exemplo**: `print("Ol√°"` (faltando par√™ntese)

##### **Erro de Execu√ß√£o**
- **O que √©**: Erro que acontece durante a execu√ß√£o
- **Causa**: Tentar dividir por zero, arquivo n√£o encontrado
- **Exemplo**: `local resultado = 10 / 0`

##### **Erro de L√≥gica**
- **O que √©**: Programa funciona, mas resultado est√° errado
- **Causa**: Algoritmo incorreto, condi√ß√£o mal formulada
- **Exemplo**: Soma que deveria multiplicar

### **üîß Como Debugar**

#### **Debug B√°sico**
```lua
-- Imprimir valores para debug
print("Valor da vari√°vel:", variavel)

-- Verificar se c√≥digo est√° sendo executado
print("Cheguei at√© aqui!")

-- Verificar tipo de vari√°vel
print("Tipo:", type(variavel))
```

#### **Ferramentas de Debug**
- **Console**: Mostra mensagens de debug
- **Logs**: Registra informa√ß√µes do programa
- **Breakpoints**: Pausa execu√ß√£o em pontos espec√≠ficos

---

## üéØ **EXEMPLOS PR√ÅTICOS SIMPLES**

### **üí° Exemplo 1: Calculadora Simples**

```lua
-- Calculadora b√°sica
function calculadora()
    print("=== Calculadora ===")
    print("Digite o primeiro n√∫mero:")
    local num1 = tonumber(io.read())
    
    print("Digite o segundo n√∫mero:")
    local num2 = tonumber(io.read())
    
    print("Escolha a opera√ß√£o (+, -, *, /):")
    local operacao = io.read()
    
    local resultado = 0
    
    if operacao == "+" then
        resultado = num1 + num2
    elseif operacao == "-" then
        resultado = num1 - num2
    elseif operacao == "*" then
        resultado = num1 * num2
    elseif operacao == "/" then
        resultado = num1 / num2
    else
        print("Opera√ß√£o inv√°lida!")
        return
    end
    
    print("Resultado:", resultado)
end

-- Executar calculadora
calculadora()
```

### **üí° Exemplo 2: Lista de Tarefas**

```lua
-- Lista de tarefas simples
local tarefas = {}

function adicionarTarefa(descricao)
    table.insert(tarefas, descricao)
    print("Tarefa adicionada:", descricao)
end

function listarTarefas()
    print("=== Lista de Tarefas ===")
    for i, tarefa in ipairs(tarefas) do
        print(i .. ". " .. tarefa)
    end
end

function removerTarefa(indice)
    if tarefas[indice] then
        table.remove(tarefas, indice)
        print("Tarefa removida!")
    else
        print("Tarefa n√£o encontrada!")
    end
end

-- Usar a lista
adicionarTarefa("Estudar Lua")
adicionarTarefa("Fazer exerc√≠cios")
adicionarTarefa("Ler documenta√ß√£o")
listarTarefas()
removerTarefa(2)
listarTarefas()
```

---

## üöÄ **PR√ìXIMOS PASSOS**

### **üìö Aprendizado Progressivo**

#### **N√≠vel Iniciante**
- [ ] Entender conceitos b√°sicos de programa√ß√£o
- [ ] Aprender sintaxe Lua b√°sica
- [ ] Criar programas simples
- [ ] Entender sistema de arquivos

#### **N√≠vel B√°sico**
- [ ] Trabalhar com fun√ß√µes e tabelas
- [ ] Criar interfaces simples
- [ ] Entender eventos e callbacks
- [ ] Debug b√°sico

#### **N√≠vel Intermedi√°rio**
- [ ] Criar m√≥dulos OTClient
- [ ] Trabalhar com OTUI
- [ ] Implementar sistemas complexos
- [ ] Otimizar c√≥digo

### **üìñ Recursos Recomendados**

#### **Para Iniciantes**
- [Guia de In√≠cio R√°pido](Guia_Inicio_Rapido.md)
- [Tutorial Lua Online](https://www.lua.org/pil/)
- [Exemplos de C√≥digo](../docs/otclient/guides/CodeExamples.md)

#### **Para Desenvolvedores**
- [Guia de Desenvolvimento de M√≥dulos](../docs/otclient/guides/Module_Development_Guide.md)
- [Refer√™ncia da API Lua](../docs/otclient/guides/Lua_API_Reference.md)
- [Melhores Pr√°ticas](../docs/otclient/guides/BestPractices.md)

---

## üß≠ **NAVEGA√á√ÉO**

### **üìñ Guias Relacionados**
- [Guia de In√≠cio R√°pido](Guia_Inicio_Rapido.md)
- [Gloss√°rio T√©cnico](Glossario_Tecnico.md)
- [Troubleshooting Comum](Troubleshooting_Comum.md)

### **üîó Links √öteis**
- [Documenta√ß√£o Principal](../README.md)
- [√çndice da Wiki](../Wiki_Index.md)
- [Sistema de Busca](../Navigation_Index_Search.md)

---

> [!success] **FUNDAMENTOS S√ìLIDOS**
> Agora voc√™ tem uma base s√≥lida de conceitos b√°sicos para come√ßar sua jornada no desenvolvimento com OTClient! üöÄ
"""
    
    # Salvar arquivo
    with open(guide_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Guia de conceitos b√°sicos criado: {guide_file}")
    return True

def create_troubleshooting_common():
    """Cria guia de troubleshooting comum."""
    
    troubleshooting_file = Path("wiki/Troubleshooting_Comum.md")
    
    print("üîß Criando guia de troubleshooting comum...")
    
    content = """---
title: Troubleshooting Comum
tags: [troubleshooting, problemas, solucoes, debug, ajuda]
type: guide
status: active
priority: alta
created: 2025-08-04
updated: 2025-08-04
---

# üîß **TROUBLESHOOTING COMUM - OTClient**

> [!info] **SOLU√á√ïES PARA PROBLEMAS FREQUENTES**
> Este guia cont√©m solu√ß√µes para os problemas mais comuns encontrados ao trabalhar com OTClient.

---

## üìã **√çNDICE DETALHADO**

### **üéØ Navega√ß√£o R√°pida**
1. [Problemas de Instala√ß√£o](#-problemas-de-instala√ß√£o)
2. [Problemas de Compila√ß√£o](#-problemas-de-compila√ß√£o)
3. [Problemas de M√≥dulos](#-problemas-de-m√≥dulos)
4. [Problemas de Interface](#-problemas-de-interface)
5. [Problemas de Performance](#-problemas-de-performance)
6. [Problemas de Rede](#-problemas-de-rede)

---

## ‚ö†Ô∏è **PROBLEMAS DE INSTALA√á√ÉO**

### **‚ùå OTClient n√£o inicia**

#### **Sintomas**
- Programa n√£o abre
- Erro "Executable not found"
- Tela em branco

#### **Solu√ß√µes**

##### **1. Verificar Depend√™ncias**
```bash
# Windows
# Verificar se Visual Studio Redistributable est√° instalado

# Linux
sudo apt-get install libgl1-mesa-glx libglu1-mesa
sudo apt-get install libxrandr2 libxinerama1 libxcursor1

# macOS
# Verificar se Xcode Command Line Tools est√° instalado
xcode-select --install
```

##### **2. Verificar Permiss√µes**
```bash
# Linux/macOS
chmod +x otclient

# Windows
# Executar como administrador
```

##### **3. Verificar Arquivos**
```bash
# Verificar se todos os arquivos est√£o presentes
ls -la
# Deve mostrar: otclient, data/, modules/, etc.
```

### **‚ùå Depend√™ncias faltando**

#### **Sintomas**
- Erro "Library not found"
- Erro "DLL missing"

#### **Solu√ß√µes**

##### **Windows**
```bash
# Instalar Visual C++ Redistributable
# Baixar da Microsoft: https://aka.ms/vs/17/release/vc_redist.x64.exe

# Verificar PATH
echo %PATH%
# Deve incluir caminho para bibliotecas
```

##### **Linux**
```bash
# Instalar depend√™ncias b√°sicas
sudo apt-get update
sudo apt-get install build-essential cmake
sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev
sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev
```

##### **macOS**
```bash
# Instalar Homebrew (se n√£o tiver)
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Instalar depend√™ncias
brew install cmake
brew install glfw
brew install openal-soft
```

---

## üî® **PROBLEMAS DE COMPILA√á√ÉO**

### **‚ùå Erro de compila√ß√£o**

#### **Sintomas**
- `make` falha
- Erro de sintaxe C++
- Erro de linking

#### **Solu√ß√µes**

##### **1. Limpar e Recompilar**
```bash
# Limpar build anterior
rm -rf build/
mkdir build
cd build

# Reconfigurar
cmake ..

# Compilar
make -j4
```

##### **2. Verificar Vers√£o do CMake**
```bash
cmake --version
# Deve ser 3.10 ou superior
```

##### **3. Verificar Compilador**
```bash
# GCC (Linux)
gcc --version

# Clang (macOS)
clang --version

# MSVC (Windows)
cl
```

##### **4. Erros Espec√≠ficos**

###### **Erro: "No such file or directory"**
```bash
# Verificar se arquivos de cabe√ßalho est√£o presentes
find . -name "*.h" | head -10

# Verificar CMakeLists.txt
cat CMakeLists.txt
```

###### **Erro: "Undefined reference"**
```bash
# Verificar se bibliotecas est√£o linkadas
# Verificar CMakeLists.txt - target_link_libraries
```

---

## üì¶ **PROBLEMAS DE M√ìDULOS**

### **‚ùå M√≥dulo n√£o carrega**

#### **Sintomas**
- Erro no log: "Failed to load module"
- M√≥dulo n√£o aparece na lista
- Funcionalidade n√£o funciona

#### **Solu√ß√µes**

##### **1. Verificar Estrutura do M√≥dulo**
```
modules/meu_modulo/
‚îú‚îÄ‚îÄ meu_modulo.otmod    # Arquivo de defini√ß√£o
‚îú‚îÄ‚îÄ meu_modulo.lua      # C√≥digo Lua
‚îî‚îÄ‚îÄ meu_modulo.otui     # Interface (opcional)
```

##### **2. Verificar Sintaxe Lua**
```lua
-- Verificar se n√£o h√° erros de sintaxe
-- Usar linter Lua se dispon√≠vel

-- Exemplo de m√≥dulo b√°sico
meuModulo = {}

function meuModulo.init()
    print("M√≥dulo inicializado!")
end

function meuModulo.terminate()
    print("M√≥dulo finalizado!")
end
```

##### **3. Verificar Arquivo .otmod**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<module>
    <name>Meu M√≥dulo</name>
    <description>Descri√ß√£o do m√≥dulo</description>
    <author>Seu Nome</author>
    <version>1.0.0</version>
    <entry>meu_modulo.lua</entry>
    <dependencies>
        <dependency>corelib</dependency>
    </dependencies>
</module>
```

##### **4. Verificar Depend√™ncias**
```lua
-- Verificar se depend√™ncias est√£o carregadas
if not g_ui then
    print("ERRO: g_ui n√£o est√° dispon√≠vel!")
    return
end
```

### **‚ùå M√≥dulo carrega mas n√£o funciona**

#### **Sintomas**
- M√≥dulo aparece na lista
- N√£o h√° erros no log
- Funcionalidade n√£o responde

#### **Solu√ß√µes**

##### **1. Verificar Inicializa√ß√£o**
```lua
function meuModulo.init()
    print("DEBUG: Inicializando m√≥dulo...")
    
    -- Verificar se recursos est√£o dispon√≠veis
    if not g_resources.fileExists("meu_modulo.otui") then
        print("ERRO: Arquivo OTUI n√£o encontrado!")
        return
    end
    
    -- Criar interface
    meuModulo.window = g_ui.displayUI('meu_modulo')
    if not meuModulo.window then
        print("ERRO: Falha ao criar interface!")
        return
    end
    
    print("DEBUG: M√≥dulo inicializado com sucesso!")
end
```

##### **2. Verificar Eventos**
```lua
-- Verificar se eventos est√£o conectados
local button = meuModulo.window:getChildById('meuBotao')
if button then
    button.onClick = function()
        print("DEBUG: Bot√£o clicado!")
        -- Sua l√≥gica aqui
    end
else
    print("ERRO: Bot√£o n√£o encontrado!")
end
```

---

## üñ•Ô∏è **PROBLEMAS DE INTERFACE**

### **‚ùå Interface n√£o aparece**

#### **Sintomas**
- M√≥dulo carrega sem erros
- Janela n√£o aparece na tela
- Interface n√£o responde

#### **Solu√ß√µes**

##### **1. Verificar Cria√ß√£o da Interface**
```lua
function meuModulo.init()
    -- Criar interface
    meuModulo.window = g_ui.displayUI('meu_modulo')
    
    -- Verificar se foi criada
    if not meuModulo.window then
        print("ERRO: Falha ao criar janela!")
        return
    end
    
    -- Mostrar janela
    meuModulo.window:show()
    
    -- Verificar se est√° vis√≠vel
    if not meuModulo.window:isVisible() then
        print("ERRO: Janela n√£o est√° vis√≠vel!")
    end
end
```

##### **2. Verificar Arquivo OTUI**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<MainWindow id="meu_modulo" size="300 200" text="Meu M√≥dulo">
    <Label id="titulo" pos="10 10" size="280 30" text="T√≠tulo" />
    <Button id="botao" pos="100 80" size="100 30" text="Clique Aqui!" />
</MainWindow>
```

##### **3. Verificar Posi√ß√£o da Janela**
```lua
-- Posicionar janela no centro
local screenSize = g_window.getSize()
local windowSize = meuModulo.window:getSize()
local x = (screenSize.width - windowSize.width) / 2
local y = (screenSize.height - windowSize.height) / 2
meuModulo.window:setPosition({x = x, y = y})
```

### **‚ùå Bot√µes n√£o respondem**

#### **Sintomas**
- Interface aparece corretamente
- Bot√µes n√£o executam a√ß√µes
- Eventos n√£o s√£o disparados

#### **Solu√ß√µes**

##### **1. Verificar Conex√£o de Eventos**
```lua
function meuModulo.init()
    meuModulo.window = g_ui.displayUI('meu_modulo')
    meuModulo.window:show()
    
    -- Conectar eventos
    local button = meuModulo.window:getChildById('meuBotao')
    if button then
        button.onClick = function()
            print("DEBUG: Bot√£o clicado!")
            -- Sua l√≥gica aqui
        end
        print("DEBUG: Evento conectado!")
    else
        print("ERRO: Bot√£o n√£o encontrado!")
    end
end
```

##### **2. Verificar IDs no OTUI**
```xml
<!-- Verificar se ID est√° correto -->
<Button id="meuBotao" pos="100 80" size="100 30" text="Clique Aqui!" />
```

##### **3. Usar Debug para Verificar**
```lua
-- Listar todos os widgets da janela
function listarWidgets(widget, nivel)
    nivel = nivel or 0
    local indent = string.rep("  ", nivel)
    print(indent .. "- " .. widget:getId() .. " (" .. widget:getClassName() .. ")")
    
    for _, child in ipairs(widget:getChildren()) do
        listarWidgets(child, nivel + 1)
    end
end

-- Usar na inicializa√ß√£o
listarWidgets(meuModulo.window)
```

---

## ‚ö° **PROBLEMAS DE PERFORMANCE**

### **‚ùå Programa lento**

#### **Sintomas**
- Interface responde lentamente
- Uso alto de CPU
- Uso alto de mem√≥ria

#### **Solu√ß√µes**

##### **1. Otimizar Loops**
```lua
-- ‚ùå Ruim: Loop desnecess√°rio
for i = 1, 1000 do
    -- Opera√ß√£o pesada
end

-- ‚úÖ Bom: Evitar loops desnecess√°rios
if condicao then
    -- Opera√ß√£o apenas quando necess√°rio
end
```

##### **2. Gerenciar Mem√≥ria**
```lua
-- Limpar refer√™ncias quando n√£o precisar mais
function meuModulo.terminate()
    if meuModulo.window then
        meuModulo.window:destroy()
        meuModulo.window = nil
    end
end
```

##### **3. Usar Timers Eficientemente**
```lua
-- ‚ùå Ruim: Timer muito frequente
connect(g_timer, { onTimeout = function()
    -- Opera√ß√£o pesada a cada 16ms
end })
g_timer:start(16)

-- ‚úÖ Bom: Timer menos frequente
connect(g_timer, { onTimeout = function()
    -- Opera√ß√£o a cada 100ms
end })
g_timer:start(100)
```

### **‚ùå Vazamento de Mem√≥ria**

#### **Sintomas**
- Uso de mem√≥ria aumenta com o tempo
- Programa fica mais lento
- Crashes ap√≥s uso prolongado

#### **Solu√ß√µes**

##### **1. Limpar Event Listeners**
```lua
-- Desconectar eventos quando n√£o precisar mais
function meuModulo.terminate()
    if meuModulo.button then
        disconnect(meuModulo.button, { onClick = meuModulo.onClick })
    end
end
```

##### **2. Limpar Timers**
```lua
-- Parar timers
function meuModulo.terminate()
    if meuModulo.timer then
        meuModulo.timer:stop()
        meuModulo.timer = nil
    end
end
```

##### **3. Verificar Refer√™ncias Circulares**
```lua
-- Evitar refer√™ncias circulares
meuModulo.data = {}
meuModulo.data.parent = meuModulo  -- ‚ùå Refer√™ncia circular

-- ‚úÖ Bom: Usar weak references se necess√°rio
```

---

## üåê **PROBLEMAS DE REDE**

### **‚ùå Conex√£o falha**

#### **Sintomas**
- N√£o consegue conectar ao servidor
- Conex√£o inst√°vel
- Timeout de conex√£o

#### **Solu√ß√µes**

##### **1. Verificar Configura√ß√£o de Rede**
```lua
-- Verificar configura√ß√µes de conex√£o
local config = g_settings.getNode('general')
local host = config:getString('host', 'localhost')
local port = config:getInt('port', 7172)

print("Tentando conectar a:", host .. ":" .. port)
```

##### **2. Verificar Firewall**
```bash
# Windows
# Verificar Windows Firewall

# Linux
sudo ufw status
sudo ufw allow 7172

# macOS
# Verificar System Preferences > Security & Privacy > Firewall
```

##### **3. Testar Conex√£o**
```bash
# Testar conectividade
ping servidor.com
telnet servidor.com 7172
```

### **‚ùå Dados corrompidos**

#### **Sintomas**
- Informa√ß√µes incorretas recebidas
- Interface mostra dados estranhos
- Crashes ao receber dados

#### **Solu√ß√µes**

##### **1. Validar Dados Recebidos**
```lua
-- Validar dados antes de usar
function processarDados(dados)
    if not dados then
        print("ERRO: Dados nulos recebidos!")
        return
    end
    
    if type(dados) ~= "table" then
        print("ERRO: Dados n√£o s√£o uma tabela!")
        return
    end
    
    -- Processar dados v√°lidos
    print("Dados v√°lidos:", dados)
end
```

##### **2. Usar Try-Catch**
```lua
-- Capturar erros de processamento
function processarComSeguranca(dados)
    local success, result = pcall(function()
        return processarDados(dados)
    end)
    
    if not success then
        print("ERRO ao processar dados:", result)
    end
end
```

---

## üîç **FERRAMENTAS DE DEBUG**

### **üìù Logging Avan√ßado**

#### **Sistema de Logs**
```lua
-- Sistema de logging personalizado
local logger = {}

function logger.debug(message)
    print("[DEBUG] " .. os.date("%H:%M:%S") .. " - " .. message)
end

function logger.info(message)
    print("[INFO] " .. os.date("%H:%M:%S") .. " - " .. message)
end

function logger.error(message)
    print("[ERROR] " .. os.date("%H:%M:%S") .. " - " .. message)
end

-- Usar
logger.debug("Iniciando m√≥dulo...")
logger.info("M√≥dulo carregado")
logger.error("Falha ao carregar recurso")
```

#### **Debug de Vari√°veis**
```lua
-- Fun√ß√£o para inspecionar vari√°veis
function inspect(var, name)
    name = name or "vari√°vel"
    print("=== INSPE√á√ÉO: " .. name .. " ===")
    print("Tipo:", type(var))
    print("Valor:", tostring(var))
    
    if type(var) == "table" then
        print("Conte√∫do da tabela:")
        for k, v in pairs(var) do
            print("  " .. tostring(k) .. " = " .. tostring(v))
        end
    end
    print("========================")
end

-- Usar
local dados = {nome = "Jo√£o", idade = 25}
inspect(dados, "dados")
```

### **üéØ Debug de Interface**

#### **Inspetor de Widgets**
```lua
-- Fun√ß√£o para inspecionar widgets
function inspecionarWidget(widget, nivel)
    nivel = nivel or 0
    local indent = string.rep("  ", nivel)
    
    print(indent .. "Widget: " .. widget:getId())
    print(indent .. "  Classe: " .. widget:getClassName())
    print(indent .. "  Posi√ß√£o: " .. tostring(widget:getPosition().x) .. ", " .. tostring(widget:getPosition().y))
    print(indent .. "  Tamanho: " .. tostring(widget:getSize().width) .. "x" .. tostring(widget:getSize().height))
    print(indent .. "  Vis√≠vel: " .. tostring(widget:isVisible()))
    
    for _, child in ipairs(widget:getChildren()) do
        inspecionarWidget(child, nivel + 1)
    end
end

-- Usar
inspecionarWidget(meuModulo.window)
```

---

## üöÄ **PR√ìXIMOS PASSOS**

### **üìö Recursos Adicionais**

#### **Documenta√ß√£o Oficial**
- [Guia de In√≠cio R√°pido](Guia_Inicio_Rapido.md)
- [Conceitos B√°sicos](Conceitos_Basicos.md)
- [Gloss√°rio T√©cnico](Glossario_Tecnico.md)

#### **Comunidade**
- [F√≥rum OTClient](https://otland.net)
- [GitHub Issues](https://github.com/otclient/otclient/issues)
- [Discord Community](https://discord.gg/otclient)

#### **Ferramentas √öteis**
- [Lua Debugger](https://marketplace.visualstudio.com/items?itemName=actboy168.lua-debug)
- [Lua Linter](https://marketplace.visualstudio.com/items?itemName=sumneko.lua)
- [OTClient Tools](../tools/)

---

## üß≠ **NAVEGA√á√ÉO**

### **üìñ Guias Relacionados**
- [Guia de In√≠cio R√°pido](Guia_Inicio_Rapido.md)
- [Conceitos B√°sicos](Conceitos_Basicos.md)
- [Gloss√°rio T√©cnico](Glossario_Tecnico.md)

### **üîó Links √öteis**
- [Documenta√ß√£o Principal](../README.md)
- [√çndice da Wiki](../Wiki_Index.md)
- [Sistema de Busca](../Navigation_Index_Search.md)

---

> [!success] **PROBLEMAS RESOLVIDOS**
> Com este guia, voc√™ tem solu√ß√µes para os problemas mais comuns do OTClient. Se n√£o encontrar a solu√ß√£o aqui, consulte a comunidade! üîß
"""
    
    # Salvar arquivo
    with open(troubleshooting_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Guia de troubleshooting criado: {troubleshooting_file}")
    return True

def main():
    """Fun√ß√£o principal."""
    print("üîß Criando guias de conceitos b√°sicos e troubleshooting...")
    
    # Criar guia de conceitos b√°sicos
    create_basic_concepts_guide()
    
    # Criar guia de troubleshooting
    create_troubleshooting_common()
    
    print("‚úÖ Todos os guias foram criados com sucesso!")

if __name__ == "__main__":
    main() 
## üîó **Links Autom√°ticos - Scripts**

> [!info] **Script de Automa√ß√£o**
> Este script faz parte do sistema de automa√ß√£o da wiki

### **üìö Links Obrigat√≥rios**
- [[../README|Hub Central da Wiki]]
- [[../dashboard/task_master|Task Master]]
- [[../dashboard/integrated_task_manager|Dashboard Central]]

### **üîß Links de Scripts**
- [[../update/README|Documenta√ß√£o de Scripts]]
- [[../maps/scripts_index|√çndice de Scripts]]
- [[../templates/README|Templates de Scripts]]

### **üìä Scripts Relacionados**
- [[../update/automatic_linkage_system.py|automatic_linkage_system.py]]
- [[../update/create_automatic_link_templates.py|create_automatic_link_templates.py]]
- [[../update/orphan_files_analyzer.py|orphan_files_analyzer.py]]
- [[../update/update_json_maps.py|update_json_maps.py]]

### **üìà M√©tricas do Script**
- **Nome**: create_basic_concepts_guide
- **Categoria**: Scripts de Automa√ß√£o
- **Fun√ß√£o**: Automa√ß√£o de tarefas da wiki
- **Status**: Ativo

---

