#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para atualizar regras e navega√ß√£o ap√≥s reorganiza√ß√£o da estrutura
"""

import os
import json
import re
from pathlib import Path
from typing import Dict, List, Set

class SystemUpdater:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.new_structure = {
            'wiki': 'Conte√∫do educacional (Obsidian)',
            'habdel': 'Metodologia de pesquisa e stories',
            'docs': 'Documenta√ß√£o interna do sistema',
            'logs': 'Relat√≥rios, monitoramento e alertas',
            'data': 'Dados do sistema',
            'scripts': 'Scripts e ferramentas',
            'backup': 'Sistema de backup',
            'temp': 'Arquivos tempor√°rios'
        }
        
    def update_cursor_md(self):
        """Atualizar cursor.md com nova estrutura"""
        cursor_path = self.project_root / "cursor.md"
        
        if not cursor_path.exists():
            print("‚ùå cursor.md n√£o encontrado")
            return False
            
        with open(cursor_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Atualizar refer√™ncias de pastas
        updates = {
            'wiki/dashboard/task_master.md': 'logs/reports/task_master.md',
            'wiki/dashboard/integrated_task_manager.md': 'docs/dashboard/integrated_task_manager.md',
            'wiki/maps/': 'data/maps/',
            'wiki/update/': 'scripts/',
            'wiki/bmad/': 'docs/bmad/',
            'wiki/log/': 'logs/',
            'wiki/backup/': 'backup/'
        }
        
        for old_path, new_path in updates.items():
            content = content.replace(old_path, new_path)
        
        # Adicionar se√ß√£o sobre nova estrutura
        new_structure_section = """
## üìÅ **NOVA ESTRUTURA DO PROJETO (P√ìS-REORGANIZA√á√ÉO)**

### **üéØ Estrutura Atualizada:**
- **`wiki/`** - Conte√∫do educacional (Obsidian)
- **`habdel/`** - Metodologia de pesquisa e stories
- **`docs/`** - Documenta√ß√£o interna do sistema
- **`logs/`** - Relat√≥rios, monitoramento e alertas
- **`data/`** - Dados do sistema
- **`scripts/`** - Scripts e ferramentas
- **`backup/`** - Sistema de backup
- **`temp/`** - Arquivos tempor√°rios

### **üîÑ Mudan√ßas Principais:**
- **Task Master**: Movido para `logs/reports/task_master.md`
- **Documenta√ß√£o**: Separada em `docs/` por categoria
- **Guias**: Movidos para `docs/guides/`
- **Sistemas**: Movidos para `docs/systems/`
- **Relat√≥rios**: Centralizados em `logs/reports/`
- **Scripts**: Centralizados em `scripts/`

### **üìã Navega√ß√£o Atualizada:**
- **Task Master**: `logs/reports/task_master.md`
- **Dashboard**: `docs/dashboard/integrated_task_manager.md`
- **Guias**: `docs/guides/`
- **Sistemas**: `docs/systems/`
- **Mapas**: `data/maps/`
- **Scripts**: `scripts/`
"""
        
        # Inserir nova se√ß√£o ap√≥s o √≠ndice
        if "## üöÄ **√çNDICE DE NAVEGA√á√ÉO R√ÅPIDA**" in content:
            content = content.replace(
                "## üöÄ **√çNDICE DE NAVEGA√á√ÉO R√ÅPIDA**",
                "## üöÄ **√çNDICE DE NAVEGA√á√ÉO R√ÅPIDA**" + new_structure_section
            )
        
        with open(cursor_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ cursor.md atualizado com nova estrutura")
        return True
    
    def update_rules_files(self):
        """Atualizar arquivos de regras com novos caminhos"""
        rules_dir = self.project_root / ".cursor" / "rules"
        
        if not rules_dir.exists():
            print("‚ùå Pasta .cursor/rules n√£o encontrada")
            return False
        
        # Mapeamento de atualiza√ß√µes
        path_updates = {
            'wiki/dashboard/': 'logs/reports/',
            'wiki/maps/': 'data/maps/',
            'wiki/update/': 'scripts/',
            'wiki/bmad/': 'docs/bmad/',
            'wiki/log/': 'logs/',
            'wiki/backup/': 'backup/',
            'wiki/guides/': 'docs/guides/',
            'wiki/systems/': 'docs/systems/'
        }
        
        updated_files = 0
        for rule_file in rules_dir.glob("*.md"):
            try:
                with open(rule_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                original_content = content
                
                # Aplicar atualiza√ß√µes de caminhos
                for old_path, new_path in path_updates.items():
                    content = content.replace(old_path, new_path)
                
                if content != original_content:
                    with open(rule_file, 'w', encoding='utf-8') as f:
                        f.write(content)
                    updated_files += 1
                    print(f"‚úÖ {rule_file.name} atualizado")
                    
            except Exception as e:
                print(f"‚ùå Erro ao atualizar {rule_file.name}: {e}")
        
        print(f"‚úÖ {updated_files} arquivos de regras atualizados")
        return True
    
    def create_navigation_index(self):
        """Criar √≠ndice de navega√ß√£o atualizado"""
        navigation_data = {
            "structure": self.new_structure,
            "key_files": {
                "task_master": "logs/reports/task_master.md",
                "dashboard": "docs/dashboard/integrated_task_manager.md",
                "cursor": "cursor.md",
                "rules": ".cursor/rules/"
            },
            "documentation": {
                "guides": "docs/guides/",
                "systems": "docs/systems/",
                "templates": "docs/templates/",
                "workflows": "docs/workflows/",
                "bmad": "docs/bmad/"
            },
            "data": {
                "maps": "data/maps/",
                "consolidated": "data/consolidated/"
            },
            "logs": {
                "reports": "logs/reports/",
                "monitoring": "logs/monitoring/",
                "alerts": "logs/alerts/",
                "metrics": "logs/metrics/"
            },
            "scripts": "scripts/",
            "backup": "backup/",
            "temp": "temp/"
        }
        
        nav_file = self.project_root / "data" / "maps" / "navigation_index.json"
        nav_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(nav_file, 'w', encoding='utf-8') as f:
            json.dump(navigation_data, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ √çndice de navega√ß√£o criado")
        return True
    
    def validate_system(self):
        """Validar se todos os sistemas ainda funcionam"""
        print("\nüîç Validando sistema...")
        
        # Verificar arquivos cr√≠ticos
        critical_files = [
            "logs/reports/task_master.md",
            "docs/dashboard/integrated_task_manager.md",
            "cursor.md",
            ".cursor/rules/"
        ]
        
        missing_files = []
        for file_path in critical_files:
            if not (self.project_root / file_path).exists():
                missing_files.append(file_path)
        
        if missing_files:
            print(f"‚ùå Arquivos cr√≠ticos n√£o encontrados: {missing_files}")
            return False
        
        # Verificar pastas principais
        main_dirs = list(self.new_structure.keys())
        missing_dirs = []
        
        for dir_name in main_dirs:
            if not (self.project_root / dir_name).exists():
                missing_dirs.append(dir_name)
        
        if missing_dirs:
            print(f"‚ùå Pastas principais n√£o encontradas: {missing_dirs}")
            return False
        
        print("‚úÖ Sistema validado - todos os componentes encontrados")
        return True
    
    def create_recovery_guide(self):
        """Criar guia de recupera√ß√£o para arquivos movidos"""
        recovery_guide = """# üîÑ Guia de Recupera√ß√£o - Arquivos Movidos

## üìÅ **Onde Encontrar Arquivos Ap√≥s Reorganiza√ß√£o**

### **üìö Documenta√ß√£o Educacional (Wiki Original)**
**Localiza√ß√£o Atual**: `wiki/`
- Cursos principais (canary_course.md, fundamentals_course.md, etc.)
- Vis√µes gerais educacionais
- Conte√∫do para Obsidian

### **üî¨ Metodologia Habdel**
**Localiza√ß√£o Atual**: `habdel/`
- Stories CANARY-* (pesquisa sobre servidor Canary)
- Stories INTEGRATION-* (integra√ß√£o de sistemas)
- Stories OTCLIENT-* (pesquisa sobre cliente OTClient)
- Stories METHODOLOGY-* (metodologia de pesquisa)
- Agentes de pesquisa (researcher_agent.md, task_researcher_agent.md)

### **üìñ Guias e Tutoriais**
**Localiza√ß√£o Atual**: `docs/guides/`
- Getting Started Guides
- Module Development Guides
- UI System Guides
- Graphics System Guides
- Configuration Guides
- Todos os guias t√©cnicos

### **‚öôÔ∏è Sistemas e Arquitetura**
**Localiza√ß√£o Atual**: `docs/systems/`
- An√°lises de sistemas OTClient
- Guias de sistemas de jogo
- Documenta√ß√£o de arquitetura
- Padr√µes de design

### **üìä Relat√≥rios e Logs**
**Localiza√ß√£o Atual**: `logs/reports/`
- Task Master (task_master.md)
- Relat√≥rios de an√°lise
- Relat√≥rios de valida√ß√£o
- Relat√≥rios de progresso

### **üîß Scripts e Ferramentas**
**Localiza√ß√£o Atual**: `scripts/`
- Agentes inteligentes
- Ferramentas de valida√ß√£o
- Utilit√°rios de manuten√ß√£o
- Sistemas de automa√ß√£o

### **üó∫Ô∏è Mapas e Dados**
**Localiza√ß√£o Atual**: `data/maps/`
- Mapas JSON de navega√ß√£o
- √çndices de busca
- Dados estruturados

### **üíæ Dados Consolidados**
**Localiza√ß√£o Atual**: `data/consolidated/`
- Dados agregados
- Configura√ß√µes consolidadas

## üîç **Como Buscar Arquivos Espec√≠ficos**

### **Para Documenta√ß√£o OTClient:**
1. Verificar `docs/guides/` para guias
2. Verificar `docs/systems/` para an√°lises
3. Verificar `habdel/` para pesquisa OTCLIENT-*

### **Para Documenta√ß√£o Canary:**
1. Verificar `habdel/` para pesquisa CANARY-*
2. Verificar `docs/guides/` para guias de integra√ß√£o

### **Para Sistemas e Agentes:**
1. Verificar `docs/bmad/` para sistema BMAD
2. Verificar `scripts/` para agentes automatizados
3. Verificar `docs/workflows/` para fluxos de trabalho

## ‚úÖ **Sistema de Navega√ß√£o Atualizado**

Todos os arquivos foram preservados e reorganizados de forma l√≥gica:
- **Conte√∫do educacional** ‚Üí `wiki/`
- **Pesquisa e metodologia** ‚Üí `habdel/`
- **Documenta√ß√£o t√©cnica** ‚Üí `docs/`
- **Relat√≥rios e logs** ‚Üí `logs/`
- **Scripts e ferramentas** ‚Üí `scripts/`
- **Dados e mapas** ‚Üí `data/`

---
*√öltima atualiza√ß√£o: 2025-08-05*
*Epic 22 - Reorganiza√ß√£o Completa de Diret√≥rios*
"""
        
        recovery_file = self.project_root / "RECOVERY_GUIDE.md"
        with open(recovery_file, 'w', encoding='utf-8') as f:
            f.write(recovery_guide)
        
        print("‚úÖ Guia de recupera√ß√£o criado: RECOVERY_GUIDE.md")
        return True
    
    def run_full_update(self):
        """Executar atualiza√ß√£o completa do sistema"""
        print("üöÄ Iniciando atualiza√ß√£o do sistema ap√≥s reorganiza√ß√£o...")
        
        steps = [
            ("Validando sistema", self.validate_system),
            ("Atualizando cursor.md", self.update_cursor_md),
            ("Atualizando regras", self.update_rules_files),
            ("Criando √≠ndice de navega√ß√£o", self.create_navigation_index),
            ("Criando guia de recupera√ß√£o", self.create_recovery_guide)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            try:
                if step_func():
                    print(f"‚úÖ {step_name} conclu√≠do")
                else:
                    print(f"‚ùå {step_name} falhou")
            except Exception as e:
                print(f"‚ùå Erro em {step_name}: {e}")
        
        print("\nüéâ Atualiza√ß√£o do sistema conclu√≠da!")
        print("üìñ Consulte RECOVERY_GUIDE.md para localizar arquivos movidos")

if __name__ == "__main__":
    updater = SystemUpdater()
    updater.run_full_update() 